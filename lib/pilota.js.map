{"version":3,"sources":["webpack:///webpack/universalModuleDefinition","webpack:///pilota.js","webpack:///webpack/bootstrap 7aa50fd2b29b4df061cc","webpack:///./~/rxjs/Subscriber.js","webpack:///./~/rxjs/util/root.js","webpack:///./~/rxjs/Observable.js","webpack:///./~/rxjs/Subscription.js","webpack:///./src/util.js","webpack:///./~/rxjs/symbol/rxSubscriber.js","webpack:///./~/rxjs/Observer.js","webpack:///./~/rxjs/symbol/observable.js","webpack:///./~/rxjs/util/errorObject.js","webpack:///./~/rxjs/util/isFunction.js","webpack:///./~/rxjs/util/isObject.js","webpack:///(webpack)/buildin/global.js","webpack:///./src/cmdBus.js","webpack:///./src/submodelCmd.js","webpack:///./src/dispatcher.js","webpack:///./src/resolver.js","webpack:///./~/rxjs/InnerSubscriber.js","webpack:///./~/rxjs/OuterSubscriber.js","webpack:///./~/rxjs/Scheduler.js","webpack:///./~/rxjs/Subject.js","webpack:///./~/rxjs/SubjectSubscription.js","webpack:///./~/rxjs/add/operator/filter.js","webpack:///./~/rxjs/add/operator/map.js","webpack:///./~/rxjs/add/operator/withLatestFrom.js","webpack:///./~/rxjs/operator/filter.js","webpack:///./~/rxjs/operator/map.js","webpack:///./~/rxjs/operator/withLatestFrom.js","webpack:///./~/rxjs/operators/filter.js","webpack:///./~/rxjs/operators/map.js","webpack:///./~/rxjs/operators/withLatestFrom.js","webpack:///./~/rxjs/scheduler/Action.js","webpack:///./~/rxjs/scheduler/AsyncAction.js","webpack:///./~/rxjs/scheduler/AsyncScheduler.js","webpack:///./~/rxjs/scheduler/async.js","webpack:///./~/rxjs/symbol/iterator.js","webpack:///./~/rxjs/util/ObjectUnsubscribedError.js","webpack:///./~/rxjs/util/UnsubscriptionError.js","webpack:///./~/rxjs/util/isArray.js","webpack:///./~/rxjs/util/isArrayLike.js","webpack:///./~/rxjs/util/isPromise.js","webpack:///./~/rxjs/util/noop.js","webpack:///./~/rxjs/util/pipe.js","webpack:///./~/rxjs/util/subscribeToResult.js","webpack:///./~/rxjs/util/toSubscriber.js","webpack:///./~/rxjs/util/tryCatch.js","webpack:///./src/pilota.js"],"names":["root","factory","exports","module","define","amd","this","modules","__webpack_require__","moduleId","installedModules","i","l","call","m","c","value","d","name","getter","Object","defineProperty","configurable","enumerable","get","n","__esModule","o","object","property","prototype","hasOwnProperty","p","s","isTrustedSubscriber","obj","Subscriber","rxSubscriber_1","rxSubscriber","__extends","b","__","constructor","create","isFunction_1","Subscription_1","Observer_1","_super","destinationOrNext","error","complete","syncErrorValue","syncErrorThrown","syncErrorThrowable","isStopped","arguments","length","destination","empty","trustedSubscriber","add","SafeSubscriber","next","subscriber","_next","err","_error","_complete","unsubscribe","closed","_unsubscribeAndRecycle","_a","_parent","_parents","Subscription","_parentSubscriber","observerOrNext","context","isFunction","bind","_context","__tryOrSetError","__tryOrUnsub","_this","wrappedComplete","fn","parent","_unsubscribe","global","__window","window","__self","self","WorkerGlobalScope","__global","_root","Error","root_1","toSubscriber_1","observable_1","pipe_1","Observable","subscribe","_isScalar","_subscribe","lift","operator","observable","source","sink","toSubscriber","_trySubscribe","forEach","PromiseCtor","Rx","config","Promise","resolve","reject","subscription","pipe","operations","_i","pipeFromArray","toPromise","x","flattenUnsubscriptionErrors","errors","reduce","errs","concat","UnsubscriptionError_1","UnsubscriptionError","isArray_1","isObject_1","tryCatch_1","errorObject_1","_subscriptions","hasErrors","index","len","remove","trial","tryCatch","errorObject","e","isArray","sub","isObject","push","teardown","EMPTY","_addParent","tmp","subscriptions","subscriptionIndex","indexOf","splice","precondition","msg","subscribeLog","observable$","v","console","log","Symbol","for","$$rxSubscriber","getSymbolObservable","$$observable","g","Function","eval","newCmdBus$","state$","dispatch","cmdBus$","_Subject","Subject","_async","async","_util","resolver","_resolver","newObjectResolver","_dispatcher","newDispatcher","addHandler","on","map","cmd","withLatestFrom","state","filter","undefined","logCmdBus","submodelCmd","result","assign","_len","props","Array","_key","cmdObject","mapping","handlers","cmdName","handler","Subscriber_1","InnerSubscriber","outerValue","outerIndex","notifyNext","notifyError","notifyComplete","OuterSubscriber","apply","innerValue","innerIndex","innerSub","Scheduler","SchedulerAction","now","schedule","work","delay","Date","Observable_1","ObjectUnsubscribedError_1","SubjectSubscription_1","SubjectSubscriber","observers","hasError","thrownError","subject","AnonymousSubject","ObjectUnsubscribedError","copy","slice","SubjectSubscription","asObservable","subscriberIndex","filter_1","map_1","withLatestFrom_1","predicate","thisArg","project","args","FilterOperator","FilterSubscriber","count","TypeError","MapOperator","MapSubscriber","pop","observables","WithLatestFromOperator","OuterSubscriber_1","subscribeToResult_1","WithLatestFromSubscriber","toRespond","values","subscribeToResult","found","_tryProject","Action","scheduler","Action_1","AsyncAction","pending","id","recycleAsyncId","requestAsyncId","setInterval","flush","clearInterval","execute","_execute","errored","errorValue","actions","Scheduler_1","AsyncScheduler","active","scheduled","action","shift","AsyncAction_1","AsyncScheduler_1","symbolIteratorPonyfill","iterator","Set_1","Set","Map_1","Map","keys","getOwnPropertyNames","key","$$iterator","stack","message","toString","join","isArrayLike","isPromise","then","noop","fns","input","prev","noop_1","outerSubscriber","InnerSubscriber_1","isArrayLike_1","isPromise_1","setTimeout","iterator_1","item","done","obs","nextOrObserver","tryCatcher","tryCatchTarget","_cmdBus","_submodelCmd","default"],"mappings":"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","file":"pilota.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"pilota\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"pilota\"] = factory();\n\telse\n\t\troot[\"pilota\"] = factory();\n})(this, function() {\nreturn \n\n\n// WEBPACK FOOTER //\n// webpack/universalModuleDefinition","(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"pilota\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"pilota\"] = factory();\n\telse\n\t\troot[\"pilota\"] = factory();\n})(this, function() {\nreturn /******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId])\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\ti: moduleId,\n/******/ \t\t\tl: false,\n/******/ \t\t\texports: {}\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.l = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// identity function for calling harmory imports with the correct context\n/******/ \t__webpack_require__.i = function(value) { return value; };\n/******/\n/******/ \t// define getter function for harmory exports\n/******/ \t__webpack_require__.d = function(exports, name, getter) {\n/******/ \t\tObject.defineProperty(exports, name, {\n/******/ \t\t\tconfigurable: false,\n/******/ \t\t\tenumerable: true,\n/******/ \t\t\tget: getter\n/******/ \t\t});\n/******/ \t};\n/******/\n/******/ \t// getDefaultExport function for compatibility with non-harmony modules\n/******/ \t__webpack_require__.n = function(module) {\n/******/ \t\tvar getter = module && module.__esModule ?\n/******/ \t\t\tfunction getDefault() { return module['default']; } :\n/******/ \t\t\tfunction getModuleExports() { return module; };\n/******/ \t\t__webpack_require__.d(getter, 'a', getter);\n/******/ \t\treturn getter;\n/******/ \t};\n/******/\n/******/ \t// Object.prototype.hasOwnProperty.call\n/******/ \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(__webpack_require__.s = 45);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar isFunction_1 = __webpack_require__(9);\nvar Subscription_1 = __webpack_require__(3);\nvar Observer_1 = __webpack_require__(6);\nvar rxSubscriber_1 = __webpack_require__(5);\n/**\n * Implements the {@link Observer} interface and extends the\n * {@link Subscription} class. While the {@link Observer} is the public API for\n * consuming the values of an {@link Observable}, all Observers get converted to\n * a Subscriber, in order to provide Subscription-like capabilities such as\n * `unsubscribe`. Subscriber is a common type in RxJS, and crucial for\n * implementing operators, but it is rarely used as a public API.\n *\n * @class Subscriber<T>\n */\nvar Subscriber = (function (_super) {\n    __extends(Subscriber, _super);\n    /**\n     * @param {Observer|function(value: T): void} [destinationOrNext] A partially\n     * defined Observer or a `next` callback function.\n     * @param {function(e: ?any): void} [error] The `error` callback of an\n     * Observer.\n     * @param {function(): void} [complete] The `complete` callback of an\n     * Observer.\n     */\n    function Subscriber(destinationOrNext, error, complete) {\n        _super.call(this);\n        this.syncErrorValue = null;\n        this.syncErrorThrown = false;\n        this.syncErrorThrowable = false;\n        this.isStopped = false;\n        switch (arguments.length) {\n            case 0:\n                this.destination = Observer_1.empty;\n                break;\n            case 1:\n                if (!destinationOrNext) {\n                    this.destination = Observer_1.empty;\n                    break;\n                }\n                if (typeof destinationOrNext === 'object') {\n                    // HACK(benlesh): To resolve an issue where Node users may have multiple\n                    // copies of rxjs in their node_modules directory.\n                    if (isTrustedSubscriber(destinationOrNext)) {\n                        var trustedSubscriber = destinationOrNext[rxSubscriber_1.rxSubscriber]();\n                        this.syncErrorThrowable = trustedSubscriber.syncErrorThrowable;\n                        this.destination = trustedSubscriber;\n                        trustedSubscriber.add(this);\n                    }\n                    else {\n                        this.syncErrorThrowable = true;\n                        this.destination = new SafeSubscriber(this, destinationOrNext);\n                    }\n                    break;\n                }\n            default:\n                this.syncErrorThrowable = true;\n                this.destination = new SafeSubscriber(this, destinationOrNext, error, complete);\n                break;\n        }\n    }\n    Subscriber.prototype[rxSubscriber_1.rxSubscriber] = function () { return this; };\n    /**\n     * A static factory for a Subscriber, given a (potentially partial) definition\n     * of an Observer.\n     * @param {function(x: ?T): void} [next] The `next` callback of an Observer.\n     * @param {function(e: ?any): void} [error] The `error` callback of an\n     * Observer.\n     * @param {function(): void} [complete] The `complete` callback of an\n     * Observer.\n     * @return {Subscriber<T>} A Subscriber wrapping the (partially defined)\n     * Observer represented by the given arguments.\n     */\n    Subscriber.create = function (next, error, complete) {\n        var subscriber = new Subscriber(next, error, complete);\n        subscriber.syncErrorThrowable = false;\n        return subscriber;\n    };\n    /**\n     * The {@link Observer} callback to receive notifications of type `next` from\n     * the Observable, with a value. The Observable may call this method 0 or more\n     * times.\n     * @param {T} [value] The `next` value.\n     * @return {void}\n     */\n    Subscriber.prototype.next = function (value) {\n        if (!this.isStopped) {\n            this._next(value);\n        }\n    };\n    /**\n     * The {@link Observer} callback to receive notifications of type `error` from\n     * the Observable, with an attached {@link Error}. Notifies the Observer that\n     * the Observable has experienced an error condition.\n     * @param {any} [err] The `error` exception.\n     * @return {void}\n     */\n    Subscriber.prototype.error = function (err) {\n        if (!this.isStopped) {\n            this.isStopped = true;\n            this._error(err);\n        }\n    };\n    /**\n     * The {@link Observer} callback to receive a valueless notification of type\n     * `complete` from the Observable. Notifies the Observer that the Observable\n     * has finished sending push-based notifications.\n     * @return {void}\n     */\n    Subscriber.prototype.complete = function () {\n        if (!this.isStopped) {\n            this.isStopped = true;\n            this._complete();\n        }\n    };\n    Subscriber.prototype.unsubscribe = function () {\n        if (this.closed) {\n            return;\n        }\n        this.isStopped = true;\n        _super.prototype.unsubscribe.call(this);\n    };\n    Subscriber.prototype._next = function (value) {\n        this.destination.next(value);\n    };\n    Subscriber.prototype._error = function (err) {\n        this.destination.error(err);\n        this.unsubscribe();\n    };\n    Subscriber.prototype._complete = function () {\n        this.destination.complete();\n        this.unsubscribe();\n    };\n    /** @deprecated internal use only */ Subscriber.prototype._unsubscribeAndRecycle = function () {\n        var _a = this, _parent = _a._parent, _parents = _a._parents;\n        this._parent = null;\n        this._parents = null;\n        this.unsubscribe();\n        this.closed = false;\n        this.isStopped = false;\n        this._parent = _parent;\n        this._parents = _parents;\n        return this;\n    };\n    return Subscriber;\n}(Subscription_1.Subscription));\nexports.Subscriber = Subscriber;\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar SafeSubscriber = (function (_super) {\n    __extends(SafeSubscriber, _super);\n    function SafeSubscriber(_parentSubscriber, observerOrNext, error, complete) {\n        _super.call(this);\n        this._parentSubscriber = _parentSubscriber;\n        var next;\n        var context = this;\n        if (isFunction_1.isFunction(observerOrNext)) {\n            next = observerOrNext;\n        }\n        else if (observerOrNext) {\n            next = observerOrNext.next;\n            error = observerOrNext.error;\n            complete = observerOrNext.complete;\n            if (observerOrNext !== Observer_1.empty) {\n                context = Object.create(observerOrNext);\n                if (isFunction_1.isFunction(context.unsubscribe)) {\n                    this.add(context.unsubscribe.bind(context));\n                }\n                context.unsubscribe = this.unsubscribe.bind(this);\n            }\n        }\n        this._context = context;\n        this._next = next;\n        this._error = error;\n        this._complete = complete;\n    }\n    SafeSubscriber.prototype.next = function (value) {\n        if (!this.isStopped && this._next) {\n            var _parentSubscriber = this._parentSubscriber;\n            if (!_parentSubscriber.syncErrorThrowable) {\n                this.__tryOrUnsub(this._next, value);\n            }\n            else if (this.__tryOrSetError(_parentSubscriber, this._next, value)) {\n                this.unsubscribe();\n            }\n        }\n    };\n    SafeSubscriber.prototype.error = function (err) {\n        if (!this.isStopped) {\n            var _parentSubscriber = this._parentSubscriber;\n            if (this._error) {\n                if (!_parentSubscriber.syncErrorThrowable) {\n                    this.__tryOrUnsub(this._error, err);\n                    this.unsubscribe();\n                }\n                else {\n                    this.__tryOrSetError(_parentSubscriber, this._error, err);\n                    this.unsubscribe();\n                }\n            }\n            else if (!_parentSubscriber.syncErrorThrowable) {\n                this.unsubscribe();\n                throw err;\n            }\n            else {\n                _parentSubscriber.syncErrorValue = err;\n                _parentSubscriber.syncErrorThrown = true;\n                this.unsubscribe();\n            }\n        }\n    };\n    SafeSubscriber.prototype.complete = function () {\n        var _this = this;\n        if (!this.isStopped) {\n            var _parentSubscriber = this._parentSubscriber;\n            if (this._complete) {\n                var wrappedComplete = function () { return _this._complete.call(_this._context); };\n                if (!_parentSubscriber.syncErrorThrowable) {\n                    this.__tryOrUnsub(wrappedComplete);\n                    this.unsubscribe();\n                }\n                else {\n                    this.__tryOrSetError(_parentSubscriber, wrappedComplete);\n                    this.unsubscribe();\n                }\n            }\n            else {\n                this.unsubscribe();\n            }\n        }\n    };\n    SafeSubscriber.prototype.__tryOrUnsub = function (fn, value) {\n        try {\n            fn.call(this._context, value);\n        }\n        catch (err) {\n            this.unsubscribe();\n            throw err;\n        }\n    };\n    SafeSubscriber.prototype.__tryOrSetError = function (parent, fn, value) {\n        try {\n            fn.call(this._context, value);\n        }\n        catch (err) {\n            parent.syncErrorValue = err;\n            parent.syncErrorThrown = true;\n            return true;\n        }\n        return false;\n    };\n    /** @deprecated internal use only */ SafeSubscriber.prototype._unsubscribe = function () {\n        var _parentSubscriber = this._parentSubscriber;\n        this._context = null;\n        this._parentSubscriber = null;\n        _parentSubscriber.unsubscribe();\n    };\n    return SafeSubscriber;\n}(Subscriber));\nfunction isTrustedSubscriber(obj) {\n    return obj instanceof Subscriber || ('syncErrorThrowable' in obj && obj[rxSubscriber_1.rxSubscriber]);\n}\n//# sourceMappingURL=Subscriber.js.map\n\n/***/ },\n/* 1 */\n/***/ function(module, exports, __webpack_require__) {\n\n\"use strict\";\n/* WEBPACK VAR INJECTION */(function(global) {\"use strict\";\n// CommonJS / Node have global context exposed as \"global\" variable.\n// We don't want to include the whole node.d.ts this this compilation unit so we'll just fake\n// the global \"global\" var for now.\nvar __window = typeof window !== 'undefined' && window;\nvar __self = typeof self !== 'undefined' && typeof WorkerGlobalScope !== 'undefined' &&\n    self instanceof WorkerGlobalScope && self;\nvar __global = typeof global !== 'undefined' && global;\nvar _root = __window || __global || __self;\nexports.root = _root;\n// Workaround Closure Compiler restriction: The body of a goog.module cannot use throw.\n// This is needed when used with angular/tsickle which inserts a goog.module statement.\n// Wrap in IIFE\n(function () {\n    if (!_root) {\n        throw new Error('RxJS could not find any global context (window, self, global)');\n    }\n})();\n//# sourceMappingURL=root.js.map\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(11)))\n\n/***/ },\n/* 2 */\n/***/ function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\"use strict\";\nvar root_1 = __webpack_require__(1);\nvar toSubscriber_1 = __webpack_require__(43);\nvar observable_1 = __webpack_require__(7);\nvar pipe_1 = __webpack_require__(41);\n/**\n * A representation of any set of values over any amount of time. This is the most basic building block\n * of RxJS.\n *\n * @class Observable<T>\n */\nvar Observable = (function () {\n    /**\n     * @constructor\n     * @param {Function} subscribe the function that is called when the Observable is\n     * initially subscribed to. This function is given a Subscriber, to which new values\n     * can be `next`ed, or an `error` method can be called to raise an error, or\n     * `complete` can be called to notify of a successful completion.\n     */\n    function Observable(subscribe) {\n        this._isScalar = false;\n        if (subscribe) {\n            this._subscribe = subscribe;\n        }\n    }\n    /**\n     * Creates a new Observable, with this Observable as the source, and the passed\n     * operator defined as the new observable's operator.\n     * @method lift\n     * @param {Operator} operator the operator defining the operation to take on the observable\n     * @return {Observable} a new observable with the Operator applied\n     */\n    Observable.prototype.lift = function (operator) {\n        var observable = new Observable();\n        observable.source = this;\n        observable.operator = operator;\n        return observable;\n    };\n    /**\n     * Invokes an execution of an Observable and registers Observer handlers for notifications it will emit.\n     *\n     * <span class=\"informal\">Use it when you have all these Observables, but still nothing is happening.</span>\n     *\n     * `subscribe` is not a regular operator, but a method that calls Observable's internal `subscribe` function. It\n     * might be for example a function that you passed to a {@link create} static factory, but most of the time it is\n     * a library implementation, which defines what and when will be emitted by an Observable. This means that calling\n     * `subscribe` is actually the moment when Observable starts its work, not when it is created, as it is often\n     * thought.\n     *\n     * Apart from starting the execution of an Observable, this method allows you to listen for values\n     * that an Observable emits, as well as for when it completes or errors. You can achieve this in two\n     * following ways.\n     *\n     * The first way is creating an object that implements {@link Observer} interface. It should have methods\n     * defined by that interface, but note that it should be just a regular JavaScript object, which you can create\n     * yourself in any way you want (ES6 class, classic function constructor, object literal etc.). In particular do\n     * not attempt to use any RxJS implementation details to create Observers - you don't need them. Remember also\n     * that your object does not have to implement all methods. If you find yourself creating a method that doesn't\n     * do anything, you can simply omit it. Note however, that if `error` method is not provided, all errors will\n     * be left uncaught.\n     *\n     * The second way is to give up on Observer object altogether and simply provide callback functions in place of its methods.\n     * This means you can provide three functions as arguments to `subscribe`, where first function is equivalent\n     * of a `next` method, second of an `error` method and third of a `complete` method. Just as in case of Observer,\n     * if you do not need to listen for something, you can omit a function, preferably by passing `undefined` or `null`,\n     * since `subscribe` recognizes these functions by where they were placed in function call. When it comes\n     * to `error` function, just as before, if not provided, errors emitted by an Observable will be thrown.\n     *\n     * Whatever style of calling `subscribe` you use, in both cases it returns a Subscription object.\n     * This object allows you to call `unsubscribe` on it, which in turn will stop work that an Observable does and will clean\n     * up all resources that an Observable used. Note that cancelling a subscription will not call `complete` callback\n     * provided to `subscribe` function, which is reserved for a regular completion signal that comes from an Observable.\n     *\n     * Remember that callbacks provided to `subscribe` are not guaranteed to be called asynchronously.\n     * It is an Observable itself that decides when these functions will be called. For example {@link of}\n     * by default emits all its values synchronously. Always check documentation for how given Observable\n     * will behave when subscribed and if its default behavior can be modified with a {@link Scheduler}.\n     *\n     * @example <caption>Subscribe with an Observer</caption>\n     * const sumObserver = {\n     *   sum: 0,\n     *   next(value) {\n     *     console.log('Adding: ' + value);\n     *     this.sum = this.sum + value;\n     *   },\n     *   error() { // We actually could just remove this method,\n     *   },        // since we do not really care about errors right now.\n     *   complete() {\n     *     console.log('Sum equals: ' + this.sum);\n     *   }\n     * };\n     *\n     * Rx.Observable.of(1, 2, 3) // Synchronously emits 1, 2, 3 and then completes.\n     * .subscribe(sumObserver);\n     *\n     * // Logs:\n     * // \"Adding: 1\"\n     * // \"Adding: 2\"\n     * // \"Adding: 3\"\n     * // \"Sum equals: 6\"\n     *\n     *\n     * @example <caption>Subscribe with functions</caption>\n     * let sum = 0;\n     *\n     * Rx.Observable.of(1, 2, 3)\n     * .subscribe(\n     *   function(value) {\n     *     console.log('Adding: ' + value);\n     *     sum = sum + value;\n     *   },\n     *   undefined,\n     *   function() {\n     *     console.log('Sum equals: ' + sum);\n     *   }\n     * );\n     *\n     * // Logs:\n     * // \"Adding: 1\"\n     * // \"Adding: 2\"\n     * // \"Adding: 3\"\n     * // \"Sum equals: 6\"\n     *\n     *\n     * @example <caption>Cancel a subscription</caption>\n     * const subscription = Rx.Observable.interval(1000).subscribe(\n     *   num => console.log(num),\n     *   undefined,\n     *   () => console.log('completed!') // Will not be called, even\n     * );                                // when cancelling subscription\n     *\n     *\n     * setTimeout(() => {\n     *   subscription.unsubscribe();\n     *   console.log('unsubscribed!');\n     * }, 2500);\n     *\n     * // Logs:\n     * // 0 after 1s\n     * // 1 after 2s\n     * // \"unsubscribed!\" after 2.5s\n     *\n     *\n     * @param {Observer|Function} observerOrNext (optional) Either an observer with methods to be called,\n     *  or the first of three possible handlers, which is the handler for each value emitted from the subscribed\n     *  Observable.\n     * @param {Function} error (optional) A handler for a terminal event resulting from an error. If no error handler is provided,\n     *  the error will be thrown as unhandled.\n     * @param {Function} complete (optional) A handler for a terminal event resulting from successful completion.\n     * @return {ISubscription} a subscription reference to the registered handlers\n     * @method subscribe\n     */\n    Observable.prototype.subscribe = function (observerOrNext, error, complete) {\n        var operator = this.operator;\n        var sink = toSubscriber_1.toSubscriber(observerOrNext, error, complete);\n        if (operator) {\n            operator.call(sink, this.source);\n        }\n        else {\n            sink.add(this.source || !sink.syncErrorThrowable ? this._subscribe(sink) : this._trySubscribe(sink));\n        }\n        if (sink.syncErrorThrowable) {\n            sink.syncErrorThrowable = false;\n            if (sink.syncErrorThrown) {\n                throw sink.syncErrorValue;\n            }\n        }\n        return sink;\n    };\n    Observable.prototype._trySubscribe = function (sink) {\n        try {\n            return this._subscribe(sink);\n        }\n        catch (err) {\n            sink.syncErrorThrown = true;\n            sink.syncErrorValue = err;\n            sink.error(err);\n        }\n    };\n    /**\n     * @method forEach\n     * @param {Function} next a handler for each value emitted by the observable\n     * @param {PromiseConstructor} [PromiseCtor] a constructor function used to instantiate the Promise\n     * @return {Promise} a promise that either resolves on observable completion or\n     *  rejects with the handled error\n     */\n    Observable.prototype.forEach = function (next, PromiseCtor) {\n        var _this = this;\n        if (!PromiseCtor) {\n            if (root_1.root.Rx && root_1.root.Rx.config && root_1.root.Rx.config.Promise) {\n                PromiseCtor = root_1.root.Rx.config.Promise;\n            }\n            else if (root_1.root.Promise) {\n                PromiseCtor = root_1.root.Promise;\n            }\n        }\n        if (!PromiseCtor) {\n            throw new Error('no Promise impl found');\n        }\n        return new PromiseCtor(function (resolve, reject) {\n            // Must be declared in a separate statement to avoid a RefernceError when\n            // accessing subscription below in the closure due to Temporal Dead Zone.\n            var subscription;\n            subscription = _this.subscribe(function (value) {\n                if (subscription) {\n                    // if there is a subscription, then we can surmise\n                    // the next handling is asynchronous. Any errors thrown\n                    // need to be rejected explicitly and unsubscribe must be\n                    // called manually\n                    try {\n                        next(value);\n                    }\n                    catch (err) {\n                        reject(err);\n                        subscription.unsubscribe();\n                    }\n                }\n                else {\n                    // if there is NO subscription, then we're getting a nexted\n                    // value synchronously during subscription. We can just call it.\n                    // If it errors, Observable's `subscribe` will ensure the\n                    // unsubscription logic is called, then synchronously rethrow the error.\n                    // After that, Promise will trap the error and send it\n                    // down the rejection path.\n                    next(value);\n                }\n            }, reject, resolve);\n        });\n    };\n    /** @deprecated internal use only */ Observable.prototype._subscribe = function (subscriber) {\n        return this.source.subscribe(subscriber);\n    };\n    /**\n     * An interop point defined by the es7-observable spec https://github.com/zenparsing/es-observable\n     * @method Symbol.observable\n     * @return {Observable} this instance of the observable\n     */\n    Observable.prototype[observable_1.observable] = function () {\n        return this;\n    };\n    /* tslint:enable:max-line-length */\n    /**\n     * Used to stitch together functional operators into a chain.\n     * @method pipe\n     * @return {Observable} the Observable result of all of the operators having\n     * been called in the order they were passed in.\n     *\n     * @example\n     *\n     * import { map, filter, scan } from 'rxjs/operators';\n     *\n     * Rx.Observable.interval(1000)\n     *   .pipe(\n     *     filter(x => x % 2 === 0),\n     *     map(x => x + x),\n     *     scan((acc, x) => acc + x)\n     *   )\n     *   .subscribe(x => console.log(x))\n     */\n    Observable.prototype.pipe = function () {\n        var operations = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            operations[_i - 0] = arguments[_i];\n        }\n        if (operations.length === 0) {\n            return this;\n        }\n        return pipe_1.pipeFromArray(operations)(this);\n    };\n    /* tslint:enable:max-line-length */\n    Observable.prototype.toPromise = function (PromiseCtor) {\n        var _this = this;\n        if (!PromiseCtor) {\n            if (root_1.root.Rx && root_1.root.Rx.config && root_1.root.Rx.config.Promise) {\n                PromiseCtor = root_1.root.Rx.config.Promise;\n            }\n            else if (root_1.root.Promise) {\n                PromiseCtor = root_1.root.Promise;\n            }\n        }\n        if (!PromiseCtor) {\n            throw new Error('no Promise impl found');\n        }\n        return new PromiseCtor(function (resolve, reject) {\n            var value;\n            _this.subscribe(function (x) { return value = x; }, function (err) { return reject(err); }, function () { return resolve(value); });\n        });\n    };\n    // HACK: Since TypeScript inherits static properties too, we have to\n    // fight against TypeScript here so Subject can have a different static create signature\n    /**\n     * Creates a new cold Observable by calling the Observable constructor\n     * @static true\n     * @owner Observable\n     * @method create\n     * @param {Function} subscribe? the subscriber function to be passed to the Observable constructor\n     * @return {Observable} a new cold observable\n     */\n    Observable.create = function (subscribe) {\n        return new Observable(subscribe);\n    };\n    return Observable;\n}());\nexports.Observable = Observable;\n//# sourceMappingURL=Observable.js.map\n\n/***/ },\n/* 3 */\n/***/ function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\"use strict\";\nvar isArray_1 = __webpack_require__(37);\nvar isObject_1 = __webpack_require__(10);\nvar isFunction_1 = __webpack_require__(9);\nvar tryCatch_1 = __webpack_require__(44);\nvar errorObject_1 = __webpack_require__(8);\nvar UnsubscriptionError_1 = __webpack_require__(36);\n/**\n * Represents a disposable resource, such as the execution of an Observable. A\n * Subscription has one important method, `unsubscribe`, that takes no argument\n * and just disposes the resource held by the subscription.\n *\n * Additionally, subscriptions may be grouped together through the `add()`\n * method, which will attach a child Subscription to the current Subscription.\n * When a Subscription is unsubscribed, all its children (and its grandchildren)\n * will be unsubscribed as well.\n *\n * @class Subscription\n */\nvar Subscription = (function () {\n    /**\n     * @param {function(): void} [unsubscribe] A function describing how to\n     * perform the disposal of resources when the `unsubscribe` method is called.\n     */\n    function Subscription(unsubscribe) {\n        /**\n         * A flag to indicate whether this Subscription has already been unsubscribed.\n         * @type {boolean}\n         */\n        this.closed = false;\n        this._parent = null;\n        this._parents = null;\n        this._subscriptions = null;\n        if (unsubscribe) {\n            this._unsubscribe = unsubscribe;\n        }\n    }\n    /**\n     * Disposes the resources held by the subscription. May, for instance, cancel\n     * an ongoing Observable execution or cancel any other type of work that\n     * started when the Subscription was created.\n     * @return {void}\n     */\n    Subscription.prototype.unsubscribe = function () {\n        var hasErrors = false;\n        var errors;\n        if (this.closed) {\n            return;\n        }\n        var _a = this, _parent = _a._parent, _parents = _a._parents, _unsubscribe = _a._unsubscribe, _subscriptions = _a._subscriptions;\n        this.closed = true;\n        this._parent = null;\n        this._parents = null;\n        // null out _subscriptions first so any child subscriptions that attempt\n        // to remove themselves from this subscription will noop\n        this._subscriptions = null;\n        var index = -1;\n        var len = _parents ? _parents.length : 0;\n        // if this._parent is null, then so is this._parents, and we\n        // don't have to remove ourselves from any parent subscriptions.\n        while (_parent) {\n            _parent.remove(this);\n            // if this._parents is null or index >= len,\n            // then _parent is set to null, and the loop exits\n            _parent = ++index < len && _parents[index] || null;\n        }\n        if (isFunction_1.isFunction(_unsubscribe)) {\n            var trial = tryCatch_1.tryCatch(_unsubscribe).call(this);\n            if (trial === errorObject_1.errorObject) {\n                hasErrors = true;\n                errors = errors || (errorObject_1.errorObject.e instanceof UnsubscriptionError_1.UnsubscriptionError ?\n                    flattenUnsubscriptionErrors(errorObject_1.errorObject.e.errors) : [errorObject_1.errorObject.e]);\n            }\n        }\n        if (isArray_1.isArray(_subscriptions)) {\n            index = -1;\n            len = _subscriptions.length;\n            while (++index < len) {\n                var sub = _subscriptions[index];\n                if (isObject_1.isObject(sub)) {\n                    var trial = tryCatch_1.tryCatch(sub.unsubscribe).call(sub);\n                    if (trial === errorObject_1.errorObject) {\n                        hasErrors = true;\n                        errors = errors || [];\n                        var err = errorObject_1.errorObject.e;\n                        if (err instanceof UnsubscriptionError_1.UnsubscriptionError) {\n                            errors = errors.concat(flattenUnsubscriptionErrors(err.errors));\n                        }\n                        else {\n                            errors.push(err);\n                        }\n                    }\n                }\n            }\n        }\n        if (hasErrors) {\n            throw new UnsubscriptionError_1.UnsubscriptionError(errors);\n        }\n    };\n    /**\n     * Adds a tear down to be called during the unsubscribe() of this\n     * Subscription.\n     *\n     * If the tear down being added is a subscription that is already\n     * unsubscribed, is the same reference `add` is being called on, or is\n     * `Subscription.EMPTY`, it will not be added.\n     *\n     * If this subscription is already in an `closed` state, the passed\n     * tear down logic will be executed immediately.\n     *\n     * @param {TeardownLogic} teardown The additional logic to execute on\n     * teardown.\n     * @return {Subscription} Returns the Subscription used or created to be\n     * added to the inner subscriptions list. This Subscription can be used with\n     * `remove()` to remove the passed teardown logic from the inner subscriptions\n     * list.\n     */\n    Subscription.prototype.add = function (teardown) {\n        if (!teardown || (teardown === Subscription.EMPTY)) {\n            return Subscription.EMPTY;\n        }\n        if (teardown === this) {\n            return this;\n        }\n        var subscription = teardown;\n        switch (typeof teardown) {\n            case 'function':\n                subscription = new Subscription(teardown);\n            case 'object':\n                if (subscription.closed || typeof subscription.unsubscribe !== 'function') {\n                    return subscription;\n                }\n                else if (this.closed) {\n                    subscription.unsubscribe();\n                    return subscription;\n                }\n                else if (typeof subscription._addParent !== 'function' /* quack quack */) {\n                    var tmp = subscription;\n                    subscription = new Subscription();\n                    subscription._subscriptions = [tmp];\n                }\n                break;\n            default:\n                throw new Error('unrecognized teardown ' + teardown + ' added to Subscription.');\n        }\n        var subscriptions = this._subscriptions || (this._subscriptions = []);\n        subscriptions.push(subscription);\n        subscription._addParent(this);\n        return subscription;\n    };\n    /**\n     * Removes a Subscription from the internal list of subscriptions that will\n     * unsubscribe during the unsubscribe process of this Subscription.\n     * @param {Subscription} subscription The subscription to remove.\n     * @return {void}\n     */\n    Subscription.prototype.remove = function (subscription) {\n        var subscriptions = this._subscriptions;\n        if (subscriptions) {\n            var subscriptionIndex = subscriptions.indexOf(subscription);\n            if (subscriptionIndex !== -1) {\n                subscriptions.splice(subscriptionIndex, 1);\n            }\n        }\n    };\n    Subscription.prototype._addParent = function (parent) {\n        var _a = this, _parent = _a._parent, _parents = _a._parents;\n        if (!_parent || _parent === parent) {\n            // If we don't have a parent, or the new parent is the same as the\n            // current parent, then set this._parent to the new parent.\n            this._parent = parent;\n        }\n        else if (!_parents) {\n            // If there's already one parent, but not multiple, allocate an Array to\n            // store the rest of the parent Subscriptions.\n            this._parents = [parent];\n        }\n        else if (_parents.indexOf(parent) === -1) {\n            // Only add the new parent to the _parents list if it's not already there.\n            _parents.push(parent);\n        }\n    };\n    Subscription.EMPTY = (function (empty) {\n        empty.closed = true;\n        return empty;\n    }(new Subscription()));\n    return Subscription;\n}());\nexports.Subscription = Subscription;\nfunction flattenUnsubscriptionErrors(errors) {\n    return errors.reduce(function (errs, err) { return errs.concat((err instanceof UnsubscriptionError_1.UnsubscriptionError) ? err.errors : err); }, []);\n}\n//# sourceMappingURL=Subscription.js.map\n\n/***/ },\n/* 4 */\n/***/ function(module, exports, __webpack_require__) {\n\n\"use strict\";\n/* WEBPACK VAR INJECTION */(function(global) {'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.precondition = precondition;\nexports.isFunction = isFunction;\nexports.subscribeLog = subscribeLog;\nfunction precondition(x, msg) {\n  if (!x) throw msg;\n}\n\nfunction isFunction(x) {\n  return typeof x === 'function';\n}\n\nfunction subscribeLog(observable$, name) {\n  observable$.subscribe(function (v) {\n    global.console.log(name + '.next:', v);\n  }, function (v) {\n    global.console.log(name + '.error:', v);\n  }, function (v) {\n    global.console.log(name + '.complete:', v);\n  });\n}\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(11)))\n\n/***/ },\n/* 5 */\n/***/ function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\"use strict\";\nvar root_1 = __webpack_require__(1);\nvar Symbol = root_1.root.Symbol;\nexports.rxSubscriber = (typeof Symbol === 'function' && typeof Symbol.for === 'function') ?\n    Symbol.for('rxSubscriber') : '@@rxSubscriber';\n/**\n * @deprecated use rxSubscriber instead\n */\nexports.$$rxSubscriber = exports.rxSubscriber;\n//# sourceMappingURL=rxSubscriber.js.map\n\n/***/ },\n/* 6 */\n/***/ function(module, exports) {\n\n\"use strict\";\n\"use strict\";\nexports.empty = {\n    closed: true,\n    next: function (value) { },\n    error: function (err) { throw err; },\n    complete: function () { }\n};\n//# sourceMappingURL=Observer.js.map\n\n/***/ },\n/* 7 */\n/***/ function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\"use strict\";\nvar root_1 = __webpack_require__(1);\nfunction getSymbolObservable(context) {\n    var $$observable;\n    var Symbol = context.Symbol;\n    if (typeof Symbol === 'function') {\n        if (Symbol.observable) {\n            $$observable = Symbol.observable;\n        }\n        else {\n            $$observable = Symbol('observable');\n            Symbol.observable = $$observable;\n        }\n    }\n    else {\n        $$observable = '@@observable';\n    }\n    return $$observable;\n}\nexports.getSymbolObservable = getSymbolObservable;\nexports.observable = getSymbolObservable(root_1.root);\n/**\n * @deprecated use observable instead\n */\nexports.$$observable = exports.observable;\n//# sourceMappingURL=observable.js.map\n\n/***/ },\n/* 8 */\n/***/ function(module, exports) {\n\n\"use strict\";\n\"use strict\";\n// typeof any so that it we don't have to cast when comparing a result to the error object\nexports.errorObject = { e: {} };\n//# sourceMappingURL=errorObject.js.map\n\n/***/ },\n/* 9 */\n/***/ function(module, exports) {\n\n\"use strict\";\n\"use strict\";\nfunction isFunction(x) {\n    return typeof x === 'function';\n}\nexports.isFunction = isFunction;\n//# sourceMappingURL=isFunction.js.map\n\n/***/ },\n/* 10 */\n/***/ function(module, exports) {\n\n\"use strict\";\n\"use strict\";\nfunction isObject(x) {\n    return x != null && typeof x === 'object';\n}\nexports.isObject = isObject;\n//# sourceMappingURL=isObject.js.map\n\n/***/ },\n/* 11 */\n/***/ function(module, exports) {\n\nvar g;\r\n\r\n// This works in non-strict mode\r\ng = (function() { return this; })();\r\n\r\ntry {\r\n\t// This works if eval is allowed (see CSP)\r\n\tg = g || Function(\"return this\")() || (1,eval)(\"this\");\r\n} catch(e) {\r\n\t// This works if the window reference is available\r\n\tif(typeof window === \"object\")\r\n\t\tg = window;\r\n}\r\n\r\n// g can still be undefined, but nothing to do about it...\r\n// We return undefined, instead of nothing here, so it's\r\n// easier to handle this case. if(!global) { ...}\r\n\r\nmodule.exports = g;\r\n\n\n/***/ },\n/* 12 */\n/***/ function(module, exports, __webpack_require__) {\n\n\"use strict\";\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.newCmdBus$ = newCmdBus$;\nexports.logCmdBus = logCmdBus;\n\nvar _Subject = __webpack_require__(19);\n\n__webpack_require__(22);\n\n__webpack_require__(21);\n\n__webpack_require__(23);\n\nvar _async = __webpack_require__(33);\n\nvar _util = __webpack_require__(4);\n\nvar _resolver = __webpack_require__(15);\n\nvar _dispatcher = __webpack_require__(14);\n\n/*\n Bus to dispatch and apply commands to the state stream.\n\n state$ -- an Observable and Observer\n\n dispatch -- One of the following:\n\n * null or undefined -- returned cmdBus does no dispatching in the given\n state. The caller can add command handlers calling `addHandler`.\n\n * object -- a map of command names to handling functions\n\n * a dispatcher function -- a function that will handle the commands. The signature\n is `(state, cmd) => state`. The name of the command is available as `name` property.\n\n */\n\nfunction newCmdBus$(state$, dispatch) {\n\n  var cmdBus$ = new _Subject.Subject(_async.async);\n\n  if ((0, _util.isFunction)(dispatch)) {\n    cmdBus$.dispatch = dispatch;\n  } else {\n    var resolver = (0, _resolver.newObjectResolver)(dispatch);\n    cmdBus$.dispatch = (0, _dispatcher.newDispatcher)(resolver);\n    cmdBus$.addHandler = resolver.addHandler;\n    cmdBus$.on = cmdBus$.addHandler; // alias\n  }\n\n  cmdBus$.map(function (cmd) {\n    return typeof cmd == 'string' ? { name: cmd } : cmd;\n  }).withLatestFrom(state$, function (cmd, state) {\n    return cmdBus$.dispatch(state, cmd);\n  }).filter(function (x) {\n    return x !== undefined;\n  }).subscribe(state$);\n\n  return cmdBus$;\n}\n\nfunction logCmdBus(cmdBus$) {\n  (0, _util.subscribeLog)(cmdBus$, 'cmdBus$');\n}\n\n/***/ },\n/* 13 */\n/***/ function(module, exports) {\n\n\"use strict\";\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.submodelCmd = submodelCmd;\nfunction submodelCmd(property, fn) {\n  if (typeof fn != 'undefined') {\n    return function (state) {\n      var result = Object.assign({}, state);\n\n      for (var _len = arguments.length, props = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n        props[_key - 1] = arguments[_key];\n      }\n\n      result[property] = fn.apply(undefined, [state[property]].concat(props));\n      return result;\n    };\n  } else {\n    // If no property is provided, then we return a partially applied fn.\n    fn = property;\n    return function (property) {\n      return submodelCmd(property, fn);\n    };\n  }\n}\n\n/***/ },\n/* 14 */\n/***/ function(module, exports, __webpack_require__) {\n\n\"use strict\";\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.newDispatcher = newDispatcher;\n\nvar _util = __webpack_require__(4);\n\n/*\n The Dispatcher is responsible for dispatching the event to all EventManagers.\n */\nfunction newDispatcher(resolver) {\n  (0, _util.precondition)(resolver, 'resolver is required for a dispatcher');\n  (0, _util.precondition)((0, _util.isFunction)(resolver), 'resolver must be a function');\n\n  var dispatch = function dispatch(state, cmdObject) {\n    var fn = resolver(cmdObject.name);\n    return fn ? fn.call(cmdObject, state, cmdObject) : undefined;\n  };\n  dispatch.addHandler = resolver.addHandler; // OK if `resolver.addHandler` is undefined\n  return dispatch;\n}\n\n/***/ },\n/* 15 */\n/***/ function(module, exports, __webpack_require__) {\n\n\"use strict\";\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.newObjectResolver = newObjectResolver;\n\nvar _util = __webpack_require__(4);\n\nfunction newObjectResolver(mapping) {\n\n  var handlers = Object.assign({}, mapping);\n\n  var resolver = function resolver(name) {\n    return handlers[name] || handlers['*'];\n  };\n\n  resolver.addHandler = function (cmdName, handler) {\n    (0, _util.precondition)(cmdName, 'requires a command name');\n    (0, _util.precondition)((0, _util.isFunction)(handler), 'requires a projection function');\n    handlers[cmdName] = handler;\n  };\n\n  return resolver;\n} /*\n   Uses an object to map commands to handler functions. What is an\n   object anyway?\n  \n   Returns a function that can be used by a dispatcher,  with\n   the signature:\n  \n   ```\n   (String) => Fn(State, CmdObject)\n   ```\n   */\n\n/***/ },\n/* 16 */\n/***/ function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Subscriber_1 = __webpack_require__(0);\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar InnerSubscriber = (function (_super) {\n    __extends(InnerSubscriber, _super);\n    function InnerSubscriber(parent, outerValue, outerIndex) {\n        _super.call(this);\n        this.parent = parent;\n        this.outerValue = outerValue;\n        this.outerIndex = outerIndex;\n        this.index = 0;\n    }\n    InnerSubscriber.prototype._next = function (value) {\n        this.parent.notifyNext(this.outerValue, value, this.outerIndex, this.index++, this);\n    };\n    InnerSubscriber.prototype._error = function (error) {\n        this.parent.notifyError(error, this);\n        this.unsubscribe();\n    };\n    InnerSubscriber.prototype._complete = function () {\n        this.parent.notifyComplete(this);\n        this.unsubscribe();\n    };\n    return InnerSubscriber;\n}(Subscriber_1.Subscriber));\nexports.InnerSubscriber = InnerSubscriber;\n//# sourceMappingURL=InnerSubscriber.js.map\n\n/***/ },\n/* 17 */\n/***/ function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Subscriber_1 = __webpack_require__(0);\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar OuterSubscriber = (function (_super) {\n    __extends(OuterSubscriber, _super);\n    function OuterSubscriber() {\n        _super.apply(this, arguments);\n    }\n    OuterSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n        this.destination.next(innerValue);\n    };\n    OuterSubscriber.prototype.notifyError = function (error, innerSub) {\n        this.destination.error(error);\n    };\n    OuterSubscriber.prototype.notifyComplete = function (innerSub) {\n        this.destination.complete();\n    };\n    return OuterSubscriber;\n}(Subscriber_1.Subscriber));\nexports.OuterSubscriber = OuterSubscriber;\n//# sourceMappingURL=OuterSubscriber.js.map\n\n/***/ },\n/* 18 */\n/***/ function(module, exports) {\n\n\"use strict\";\n\"use strict\";\n/**\n * An execution context and a data structure to order tasks and schedule their\n * execution. Provides a notion of (potentially virtual) time, through the\n * `now()` getter method.\n *\n * Each unit of work in a Scheduler is called an {@link Action}.\n *\n * ```ts\n * class Scheduler {\n *   now(): number;\n *   schedule(work, delay?, state?): Subscription;\n * }\n * ```\n *\n * @class Scheduler\n */\nvar Scheduler = (function () {\n    function Scheduler(SchedulerAction, now) {\n        if (now === void 0) { now = Scheduler.now; }\n        this.SchedulerAction = SchedulerAction;\n        this.now = now;\n    }\n    /**\n     * Schedules a function, `work`, for execution. May happen at some point in\n     * the future, according to the `delay` parameter, if specified. May be passed\n     * some context object, `state`, which will be passed to the `work` function.\n     *\n     * The given arguments will be processed an stored as an Action object in a\n     * queue of actions.\n     *\n     * @param {function(state: ?T): ?Subscription} work A function representing a\n     * task, or some unit of work to be executed by the Scheduler.\n     * @param {number} [delay] Time to wait before executing the work, where the\n     * time unit is implicit and defined by the Scheduler itself.\n     * @param {T} [state] Some contextual data that the `work` function uses when\n     * called by the Scheduler.\n     * @return {Subscription} A subscription in order to be able to unsubscribe\n     * the scheduled work.\n     */\n    Scheduler.prototype.schedule = function (work, delay, state) {\n        if (delay === void 0) { delay = 0; }\n        return new this.SchedulerAction(this, work).schedule(state, delay);\n    };\n    Scheduler.now = Date.now ? Date.now : function () { return +new Date(); };\n    return Scheduler;\n}());\nexports.Scheduler = Scheduler;\n//# sourceMappingURL=Scheduler.js.map\n\n/***/ },\n/* 19 */\n/***/ function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Observable_1 = __webpack_require__(2);\nvar Subscriber_1 = __webpack_require__(0);\nvar Subscription_1 = __webpack_require__(3);\nvar ObjectUnsubscribedError_1 = __webpack_require__(35);\nvar SubjectSubscription_1 = __webpack_require__(20);\nvar rxSubscriber_1 = __webpack_require__(5);\n/**\n * @class SubjectSubscriber<T>\n */\nvar SubjectSubscriber = (function (_super) {\n    __extends(SubjectSubscriber, _super);\n    function SubjectSubscriber(destination) {\n        _super.call(this, destination);\n        this.destination = destination;\n    }\n    return SubjectSubscriber;\n}(Subscriber_1.Subscriber));\nexports.SubjectSubscriber = SubjectSubscriber;\n/**\n * @class Subject<T>\n */\nvar Subject = (function (_super) {\n    __extends(Subject, _super);\n    function Subject() {\n        _super.call(this);\n        this.observers = [];\n        this.closed = false;\n        this.isStopped = false;\n        this.hasError = false;\n        this.thrownError = null;\n    }\n    Subject.prototype[rxSubscriber_1.rxSubscriber] = function () {\n        return new SubjectSubscriber(this);\n    };\n    Subject.prototype.lift = function (operator) {\n        var subject = new AnonymousSubject(this, this);\n        subject.operator = operator;\n        return subject;\n    };\n    Subject.prototype.next = function (value) {\n        if (this.closed) {\n            throw new ObjectUnsubscribedError_1.ObjectUnsubscribedError();\n        }\n        if (!this.isStopped) {\n            var observers = this.observers;\n            var len = observers.length;\n            var copy = observers.slice();\n            for (var i = 0; i < len; i++) {\n                copy[i].next(value);\n            }\n        }\n    };\n    Subject.prototype.error = function (err) {\n        if (this.closed) {\n            throw new ObjectUnsubscribedError_1.ObjectUnsubscribedError();\n        }\n        this.hasError = true;\n        this.thrownError = err;\n        this.isStopped = true;\n        var observers = this.observers;\n        var len = observers.length;\n        var copy = observers.slice();\n        for (var i = 0; i < len; i++) {\n            copy[i].error(err);\n        }\n        this.observers.length = 0;\n    };\n    Subject.prototype.complete = function () {\n        if (this.closed) {\n            throw new ObjectUnsubscribedError_1.ObjectUnsubscribedError();\n        }\n        this.isStopped = true;\n        var observers = this.observers;\n        var len = observers.length;\n        var copy = observers.slice();\n        for (var i = 0; i < len; i++) {\n            copy[i].complete();\n        }\n        this.observers.length = 0;\n    };\n    Subject.prototype.unsubscribe = function () {\n        this.isStopped = true;\n        this.closed = true;\n        this.observers = null;\n    };\n    Subject.prototype._trySubscribe = function (subscriber) {\n        if (this.closed) {\n            throw new ObjectUnsubscribedError_1.ObjectUnsubscribedError();\n        }\n        else {\n            return _super.prototype._trySubscribe.call(this, subscriber);\n        }\n    };\n    /** @deprecated internal use only */ Subject.prototype._subscribe = function (subscriber) {\n        if (this.closed) {\n            throw new ObjectUnsubscribedError_1.ObjectUnsubscribedError();\n        }\n        else if (this.hasError) {\n            subscriber.error(this.thrownError);\n            return Subscription_1.Subscription.EMPTY;\n        }\n        else if (this.isStopped) {\n            subscriber.complete();\n            return Subscription_1.Subscription.EMPTY;\n        }\n        else {\n            this.observers.push(subscriber);\n            return new SubjectSubscription_1.SubjectSubscription(this, subscriber);\n        }\n    };\n    Subject.prototype.asObservable = function () {\n        var observable = new Observable_1.Observable();\n        observable.source = this;\n        return observable;\n    };\n    Subject.create = function (destination, source) {\n        return new AnonymousSubject(destination, source);\n    };\n    return Subject;\n}(Observable_1.Observable));\nexports.Subject = Subject;\n/**\n * @class AnonymousSubject<T>\n */\nvar AnonymousSubject = (function (_super) {\n    __extends(AnonymousSubject, _super);\n    function AnonymousSubject(destination, source) {\n        _super.call(this);\n        this.destination = destination;\n        this.source = source;\n    }\n    AnonymousSubject.prototype.next = function (value) {\n        var destination = this.destination;\n        if (destination && destination.next) {\n            destination.next(value);\n        }\n    };\n    AnonymousSubject.prototype.error = function (err) {\n        var destination = this.destination;\n        if (destination && destination.error) {\n            this.destination.error(err);\n        }\n    };\n    AnonymousSubject.prototype.complete = function () {\n        var destination = this.destination;\n        if (destination && destination.complete) {\n            this.destination.complete();\n        }\n    };\n    /** @deprecated internal use only */ AnonymousSubject.prototype._subscribe = function (subscriber) {\n        var source = this.source;\n        if (source) {\n            return this.source.subscribe(subscriber);\n        }\n        else {\n            return Subscription_1.Subscription.EMPTY;\n        }\n    };\n    return AnonymousSubject;\n}(Subject));\nexports.AnonymousSubject = AnonymousSubject;\n//# sourceMappingURL=Subject.js.map\n\n/***/ },\n/* 20 */\n/***/ function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Subscription_1 = __webpack_require__(3);\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar SubjectSubscription = (function (_super) {\n    __extends(SubjectSubscription, _super);\n    function SubjectSubscription(subject, subscriber) {\n        _super.call(this);\n        this.subject = subject;\n        this.subscriber = subscriber;\n        this.closed = false;\n    }\n    SubjectSubscription.prototype.unsubscribe = function () {\n        if (this.closed) {\n            return;\n        }\n        this.closed = true;\n        var subject = this.subject;\n        var observers = subject.observers;\n        this.subject = null;\n        if (!observers || observers.length === 0 || subject.isStopped || subject.closed) {\n            return;\n        }\n        var subscriberIndex = observers.indexOf(this.subscriber);\n        if (subscriberIndex !== -1) {\n            observers.splice(subscriberIndex, 1);\n        }\n    };\n    return SubjectSubscription;\n}(Subscription_1.Subscription));\nexports.SubjectSubscription = SubjectSubscription;\n//# sourceMappingURL=SubjectSubscription.js.map\n\n/***/ },\n/* 21 */\n/***/ function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\"use strict\";\nvar Observable_1 = __webpack_require__(2);\nvar filter_1 = __webpack_require__(24);\nObservable_1.Observable.prototype.filter = filter_1.filter;\n//# sourceMappingURL=filter.js.map\n\n/***/ },\n/* 22 */\n/***/ function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\"use strict\";\nvar Observable_1 = __webpack_require__(2);\nvar map_1 = __webpack_require__(25);\nObservable_1.Observable.prototype.map = map_1.map;\n//# sourceMappingURL=map.js.map\n\n/***/ },\n/* 23 */\n/***/ function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\"use strict\";\nvar Observable_1 = __webpack_require__(2);\nvar withLatestFrom_1 = __webpack_require__(26);\nObservable_1.Observable.prototype.withLatestFrom = withLatestFrom_1.withLatestFrom;\n//# sourceMappingURL=withLatestFrom.js.map\n\n/***/ },\n/* 24 */\n/***/ function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\"use strict\";\nvar filter_1 = __webpack_require__(27);\n/* tslint:enable:max-line-length */\n/**\n * Filter items emitted by the source Observable by only emitting those that\n * satisfy a specified predicate.\n *\n * <span class=\"informal\">Like\n * [Array.prototype.filter()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter),\n * it only emits a value from the source if it passes a criterion function.</span>\n *\n * <img src=\"./img/filter.png\" width=\"100%\">\n *\n * Similar to the well-known `Array.prototype.filter` method, this operator\n * takes values from the source Observable, passes them through a `predicate`\n * function and only emits those values that yielded `true`.\n *\n * @example <caption>Emit only click events whose target was a DIV element</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var clicksOnDivs = clicks.filter(ev => ev.target.tagName === 'DIV');\n * clicksOnDivs.subscribe(x => console.log(x));\n *\n * @see {@link distinct}\n * @see {@link distinctUntilChanged}\n * @see {@link distinctUntilKeyChanged}\n * @see {@link ignoreElements}\n * @see {@link partition}\n * @see {@link skip}\n *\n * @param {function(value: T, index: number): boolean} predicate A function that\n * evaluates each value emitted by the source Observable. If it returns `true`,\n * the value is emitted, if `false` the value is not passed to the output\n * Observable. The `index` parameter is the number `i` for the i-th source\n * emission that has happened since the subscription, starting from the number\n * `0`.\n * @param {any} [thisArg] An optional argument to determine the value of `this`\n * in the `predicate` function.\n * @return {Observable} An Observable of values from the source that were\n * allowed by the `predicate` function.\n * @method filter\n * @owner Observable\n */\nfunction filter(predicate, thisArg) {\n    return filter_1.filter(predicate, thisArg)(this);\n}\nexports.filter = filter;\n//# sourceMappingURL=filter.js.map\n\n/***/ },\n/* 25 */\n/***/ function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\"use strict\";\nvar map_1 = __webpack_require__(28);\n/**\n * Applies a given `project` function to each value emitted by the source\n * Observable, and emits the resulting values as an Observable.\n *\n * <span class=\"informal\">Like [Array.prototype.map()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map),\n * it passes each source value through a transformation function to get\n * corresponding output values.</span>\n *\n * <img src=\"./img/map.png\" width=\"100%\">\n *\n * Similar to the well known `Array.prototype.map` function, this operator\n * applies a projection to each value and emits that projection in the output\n * Observable.\n *\n * @example <caption>Map every click to the clientX position of that click</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var positions = clicks.map(ev => ev.clientX);\n * positions.subscribe(x => console.log(x));\n *\n * @see {@link mapTo}\n * @see {@link pluck}\n *\n * @param {function(value: T, index: number): R} project The function to apply\n * to each `value` emitted by the source Observable. The `index` parameter is\n * the number `i` for the i-th emission that has happened since the\n * subscription, starting from the number `0`.\n * @param {any} [thisArg] An optional argument to define what `this` is in the\n * `project` function.\n * @return {Observable<R>} An Observable that emits the values from the source\n * Observable transformed by the given `project` function.\n * @method map\n * @owner Observable\n */\nfunction map(project, thisArg) {\n    return map_1.map(project, thisArg)(this);\n}\nexports.map = map;\n//# sourceMappingURL=map.js.map\n\n/***/ },\n/* 26 */\n/***/ function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\"use strict\";\nvar withLatestFrom_1 = __webpack_require__(29);\n/* tslint:enable:max-line-length */\n/**\n * Combines the source Observable with other Observables to create an Observable\n * whose values are calculated from the latest values of each, only when the\n * source emits.\n *\n * <span class=\"informal\">Whenever the source Observable emits a value, it\n * computes a formula using that value plus the latest values from other input\n * Observables, then emits the output of that formula.</span>\n *\n * <img src=\"./img/withLatestFrom.png\" width=\"100%\">\n *\n * `withLatestFrom` combines each value from the source Observable (the\n * instance) with the latest values from the other input Observables only when\n * the source emits a value, optionally using a `project` function to determine\n * the value to be emitted on the output Observable. All input Observables must\n * emit at least one value before the output Observable will emit a value.\n *\n * @example <caption>On every click event, emit an array with the latest timer event plus the click event</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var timer = Rx.Observable.interval(1000);\n * var result = clicks.withLatestFrom(timer);\n * result.subscribe(x => console.log(x));\n *\n * @see {@link combineLatest}\n *\n * @param {ObservableInput} other An input Observable to combine with the source\n * Observable. More than one input Observables may be given as argument.\n * @param {Function} [project] Projection function for combining values\n * together. Receives all values in order of the Observables passed, where the\n * first parameter is a value from the source Observable. (e.g.\n * `a.withLatestFrom(b, c, (a1, b1, c1) => a1 + b1 + c1)`). If this is not\n * passed, arrays will be emitted on the output Observable.\n * @return {Observable} An Observable of projected values from the most recent\n * values from each input Observable, or an array of the most recent values from\n * each input Observable.\n * @method withLatestFrom\n * @owner Observable\n */\nfunction withLatestFrom() {\n    var args = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        args[_i - 0] = arguments[_i];\n    }\n    return withLatestFrom_1.withLatestFrom.apply(void 0, args)(this);\n}\nexports.withLatestFrom = withLatestFrom;\n//# sourceMappingURL=withLatestFrom.js.map\n\n/***/ },\n/* 27 */\n/***/ function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Subscriber_1 = __webpack_require__(0);\n/* tslint:enable:max-line-length */\n/**\n * Filter items emitted by the source Observable by only emitting those that\n * satisfy a specified predicate.\n *\n * <span class=\"informal\">Like\n * [Array.prototype.filter()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter),\n * it only emits a value from the source if it passes a criterion function.</span>\n *\n * <img src=\"./img/filter.png\" width=\"100%\">\n *\n * Similar to the well-known `Array.prototype.filter` method, this operator\n * takes values from the source Observable, passes them through a `predicate`\n * function and only emits those values that yielded `true`.\n *\n * @example <caption>Emit only click events whose target was a DIV element</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var clicksOnDivs = clicks.filter(ev => ev.target.tagName === 'DIV');\n * clicksOnDivs.subscribe(x => console.log(x));\n *\n * @see {@link distinct}\n * @see {@link distinctUntilChanged}\n * @see {@link distinctUntilKeyChanged}\n * @see {@link ignoreElements}\n * @see {@link partition}\n * @see {@link skip}\n *\n * @param {function(value: T, index: number): boolean} predicate A function that\n * evaluates each value emitted by the source Observable. If it returns `true`,\n * the value is emitted, if `false` the value is not passed to the output\n * Observable. The `index` parameter is the number `i` for the i-th source\n * emission that has happened since the subscription, starting from the number\n * `0`.\n * @param {any} [thisArg] An optional argument to determine the value of `this`\n * in the `predicate` function.\n * @return {Observable} An Observable of values from the source that were\n * allowed by the `predicate` function.\n * @method filter\n * @owner Observable\n */\nfunction filter(predicate, thisArg) {\n    return function filterOperatorFunction(source) {\n        return source.lift(new FilterOperator(predicate, thisArg));\n    };\n}\nexports.filter = filter;\nvar FilterOperator = (function () {\n    function FilterOperator(predicate, thisArg) {\n        this.predicate = predicate;\n        this.thisArg = thisArg;\n    }\n    FilterOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new FilterSubscriber(subscriber, this.predicate, this.thisArg));\n    };\n    return FilterOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar FilterSubscriber = (function (_super) {\n    __extends(FilterSubscriber, _super);\n    function FilterSubscriber(destination, predicate, thisArg) {\n        _super.call(this, destination);\n        this.predicate = predicate;\n        this.thisArg = thisArg;\n        this.count = 0;\n    }\n    // the try catch block below is left specifically for\n    // optimization and perf reasons. a tryCatcher is not necessary here.\n    FilterSubscriber.prototype._next = function (value) {\n        var result;\n        try {\n            result = this.predicate.call(this.thisArg, value, this.count++);\n        }\n        catch (err) {\n            this.destination.error(err);\n            return;\n        }\n        if (result) {\n            this.destination.next(value);\n        }\n    };\n    return FilterSubscriber;\n}(Subscriber_1.Subscriber));\n//# sourceMappingURL=filter.js.map\n\n/***/ },\n/* 28 */\n/***/ function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Subscriber_1 = __webpack_require__(0);\n/**\n * Applies a given `project` function to each value emitted by the source\n * Observable, and emits the resulting values as an Observable.\n *\n * <span class=\"informal\">Like [Array.prototype.map()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map),\n * it passes each source value through a transformation function to get\n * corresponding output values.</span>\n *\n * <img src=\"./img/map.png\" width=\"100%\">\n *\n * Similar to the well known `Array.prototype.map` function, this operator\n * applies a projection to each value and emits that projection in the output\n * Observable.\n *\n * @example <caption>Map every click to the clientX position of that click</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var positions = clicks.map(ev => ev.clientX);\n * positions.subscribe(x => console.log(x));\n *\n * @see {@link mapTo}\n * @see {@link pluck}\n *\n * @param {function(value: T, index: number): R} project The function to apply\n * to each `value` emitted by the source Observable. The `index` parameter is\n * the number `i` for the i-th emission that has happened since the\n * subscription, starting from the number `0`.\n * @param {any} [thisArg] An optional argument to define what `this` is in the\n * `project` function.\n * @return {Observable<R>} An Observable that emits the values from the source\n * Observable transformed by the given `project` function.\n * @method map\n * @owner Observable\n */\nfunction map(project, thisArg) {\n    return function mapOperation(source) {\n        if (typeof project !== 'function') {\n            throw new TypeError('argument is not a function. Are you looking for `mapTo()`?');\n        }\n        return source.lift(new MapOperator(project, thisArg));\n    };\n}\nexports.map = map;\nvar MapOperator = (function () {\n    function MapOperator(project, thisArg) {\n        this.project = project;\n        this.thisArg = thisArg;\n    }\n    MapOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new MapSubscriber(subscriber, this.project, this.thisArg));\n    };\n    return MapOperator;\n}());\nexports.MapOperator = MapOperator;\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar MapSubscriber = (function (_super) {\n    __extends(MapSubscriber, _super);\n    function MapSubscriber(destination, project, thisArg) {\n        _super.call(this, destination);\n        this.project = project;\n        this.count = 0;\n        this.thisArg = thisArg || this;\n    }\n    // NOTE: This looks unoptimized, but it's actually purposefully NOT\n    // using try/catch optimizations.\n    MapSubscriber.prototype._next = function (value) {\n        var result;\n        try {\n            result = this.project.call(this.thisArg, value, this.count++);\n        }\n        catch (err) {\n            this.destination.error(err);\n            return;\n        }\n        this.destination.next(result);\n    };\n    return MapSubscriber;\n}(Subscriber_1.Subscriber));\n//# sourceMappingURL=map.js.map\n\n/***/ },\n/* 29 */\n/***/ function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar OuterSubscriber_1 = __webpack_require__(17);\nvar subscribeToResult_1 = __webpack_require__(42);\n/* tslint:enable:max-line-length */\n/**\n * Combines the source Observable with other Observables to create an Observable\n * whose values are calculated from the latest values of each, only when the\n * source emits.\n *\n * <span class=\"informal\">Whenever the source Observable emits a value, it\n * computes a formula using that value plus the latest values from other input\n * Observables, then emits the output of that formula.</span>\n *\n * <img src=\"./img/withLatestFrom.png\" width=\"100%\">\n *\n * `withLatestFrom` combines each value from the source Observable (the\n * instance) with the latest values from the other input Observables only when\n * the source emits a value, optionally using a `project` function to determine\n * the value to be emitted on the output Observable. All input Observables must\n * emit at least one value before the output Observable will emit a value.\n *\n * @example <caption>On every click event, emit an array with the latest timer event plus the click event</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var timer = Rx.Observable.interval(1000);\n * var result = clicks.withLatestFrom(timer);\n * result.subscribe(x => console.log(x));\n *\n * @see {@link combineLatest}\n *\n * @param {ObservableInput} other An input Observable to combine with the source\n * Observable. More than one input Observables may be given as argument.\n * @param {Function} [project] Projection function for combining values\n * together. Receives all values in order of the Observables passed, where the\n * first parameter is a value from the source Observable. (e.g.\n * `a.withLatestFrom(b, c, (a1, b1, c1) => a1 + b1 + c1)`). If this is not\n * passed, arrays will be emitted on the output Observable.\n * @return {Observable} An Observable of projected values from the most recent\n * values from each input Observable, or an array of the most recent values from\n * each input Observable.\n * @method withLatestFrom\n * @owner Observable\n */\nfunction withLatestFrom() {\n    var args = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        args[_i - 0] = arguments[_i];\n    }\n    return function (source) {\n        var project;\n        if (typeof args[args.length - 1] === 'function') {\n            project = args.pop();\n        }\n        var observables = args;\n        return source.lift(new WithLatestFromOperator(observables, project));\n    };\n}\nexports.withLatestFrom = withLatestFrom;\nvar WithLatestFromOperator = (function () {\n    function WithLatestFromOperator(observables, project) {\n        this.observables = observables;\n        this.project = project;\n    }\n    WithLatestFromOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new WithLatestFromSubscriber(subscriber, this.observables, this.project));\n    };\n    return WithLatestFromOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar WithLatestFromSubscriber = (function (_super) {\n    __extends(WithLatestFromSubscriber, _super);\n    function WithLatestFromSubscriber(destination, observables, project) {\n        _super.call(this, destination);\n        this.observables = observables;\n        this.project = project;\n        this.toRespond = [];\n        var len = observables.length;\n        this.values = new Array(len);\n        for (var i = 0; i < len; i++) {\n            this.toRespond.push(i);\n        }\n        for (var i = 0; i < len; i++) {\n            var observable = observables[i];\n            this.add(subscribeToResult_1.subscribeToResult(this, observable, observable, i));\n        }\n    }\n    WithLatestFromSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n        this.values[outerIndex] = innerValue;\n        var toRespond = this.toRespond;\n        if (toRespond.length > 0) {\n            var found = toRespond.indexOf(outerIndex);\n            if (found !== -1) {\n                toRespond.splice(found, 1);\n            }\n        }\n    };\n    WithLatestFromSubscriber.prototype.notifyComplete = function () {\n        // noop\n    };\n    WithLatestFromSubscriber.prototype._next = function (value) {\n        if (this.toRespond.length === 0) {\n            var args = [value].concat(this.values);\n            if (this.project) {\n                this._tryProject(args);\n            }\n            else {\n                this.destination.next(args);\n            }\n        }\n    };\n    WithLatestFromSubscriber.prototype._tryProject = function (args) {\n        var result;\n        try {\n            result = this.project.apply(this, args);\n        }\n        catch (err) {\n            this.destination.error(err);\n            return;\n        }\n        this.destination.next(result);\n    };\n    return WithLatestFromSubscriber;\n}(OuterSubscriber_1.OuterSubscriber));\n//# sourceMappingURL=withLatestFrom.js.map\n\n/***/ },\n/* 30 */\n/***/ function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Subscription_1 = __webpack_require__(3);\n/**\n * A unit of work to be executed in a {@link Scheduler}. An action is typically\n * created from within a Scheduler and an RxJS user does not need to concern\n * themselves about creating and manipulating an Action.\n *\n * ```ts\n * class Action<T> extends Subscription {\n *   new (scheduler: Scheduler, work: (state?: T) => void);\n *   schedule(state?: T, delay: number = 0): Subscription;\n * }\n * ```\n *\n * @class Action<T>\n */\nvar Action = (function (_super) {\n    __extends(Action, _super);\n    function Action(scheduler, work) {\n        _super.call(this);\n    }\n    /**\n     * Schedules this action on its parent Scheduler for execution. May be passed\n     * some context object, `state`. May happen at some point in the future,\n     * according to the `delay` parameter, if specified.\n     * @param {T} [state] Some contextual data that the `work` function uses when\n     * called by the Scheduler.\n     * @param {number} [delay] Time to wait before executing the work, where the\n     * time unit is implicit and defined by the Scheduler.\n     * @return {void}\n     */\n    Action.prototype.schedule = function (state, delay) {\n        if (delay === void 0) { delay = 0; }\n        return this;\n    };\n    return Action;\n}(Subscription_1.Subscription));\nexports.Action = Action;\n//# sourceMappingURL=Action.js.map\n\n/***/ },\n/* 31 */\n/***/ function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar root_1 = __webpack_require__(1);\nvar Action_1 = __webpack_require__(30);\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar AsyncAction = (function (_super) {\n    __extends(AsyncAction, _super);\n    function AsyncAction(scheduler, work) {\n        _super.call(this, scheduler, work);\n        this.scheduler = scheduler;\n        this.pending = false;\n        this.work = work;\n    }\n    AsyncAction.prototype.schedule = function (state, delay) {\n        if (delay === void 0) { delay = 0; }\n        if (this.closed) {\n            return this;\n        }\n        // Always replace the current state with the new state.\n        this.state = state;\n        // Set the pending flag indicating that this action has been scheduled, or\n        // has recursively rescheduled itself.\n        this.pending = true;\n        var id = this.id;\n        var scheduler = this.scheduler;\n        //\n        // Important implementation note:\n        //\n        // Actions only execute once by default, unless rescheduled from within the\n        // scheduled callback. This allows us to implement single and repeat\n        // actions via the same code path, without adding API surface area, as well\n        // as mimic traditional recursion but across asynchronous boundaries.\n        //\n        // However, JS runtimes and timers distinguish between intervals achieved by\n        // serial `setTimeout` calls vs. a single `setInterval` call. An interval of\n        // serial `setTimeout` calls can be individually delayed, which delays\n        // scheduling the next `setTimeout`, and so on. `setInterval` attempts to\n        // guarantee the interval callback will be invoked more precisely to the\n        // interval period, regardless of load.\n        //\n        // Therefore, we use `setInterval` to schedule single and repeat actions.\n        // If the action reschedules itself with the same delay, the interval is not\n        // canceled. If the action doesn't reschedule, or reschedules with a\n        // different delay, the interval will be canceled after scheduled callback\n        // execution.\n        //\n        if (id != null) {\n            this.id = this.recycleAsyncId(scheduler, id, delay);\n        }\n        this.delay = delay;\n        // If this action has already an async Id, don't request a new one.\n        this.id = this.id || this.requestAsyncId(scheduler, this.id, delay);\n        return this;\n    };\n    AsyncAction.prototype.requestAsyncId = function (scheduler, id, delay) {\n        if (delay === void 0) { delay = 0; }\n        return root_1.root.setInterval(scheduler.flush.bind(scheduler, this), delay);\n    };\n    AsyncAction.prototype.recycleAsyncId = function (scheduler, id, delay) {\n        if (delay === void 0) { delay = 0; }\n        // If this action is rescheduled with the same delay time, don't clear the interval id.\n        if (delay !== null && this.delay === delay && this.pending === false) {\n            return id;\n        }\n        // Otherwise, if the action's delay time is different from the current delay,\n        // or the action has been rescheduled before it's executed, clear the interval id\n        return root_1.root.clearInterval(id) && undefined || undefined;\n    };\n    /**\n     * Immediately executes this action and the `work` it contains.\n     * @return {any}\n     */\n    AsyncAction.prototype.execute = function (state, delay) {\n        if (this.closed) {\n            return new Error('executing a cancelled action');\n        }\n        this.pending = false;\n        var error = this._execute(state, delay);\n        if (error) {\n            return error;\n        }\n        else if (this.pending === false && this.id != null) {\n            // Dequeue if the action didn't reschedule itself. Don't call\n            // unsubscribe(), because the action could reschedule later.\n            // For example:\n            // ```\n            // scheduler.schedule(function doWork(counter) {\n            //   /* ... I'm a busy worker bee ... */\n            //   var originalAction = this;\n            //   /* wait 100ms before rescheduling the action */\n            //   setTimeout(function () {\n            //     originalAction.schedule(counter + 1);\n            //   }, 100);\n            // }, 1000);\n            // ```\n            this.id = this.recycleAsyncId(this.scheduler, this.id, null);\n        }\n    };\n    AsyncAction.prototype._execute = function (state, delay) {\n        var errored = false;\n        var errorValue = undefined;\n        try {\n            this.work(state);\n        }\n        catch (e) {\n            errored = true;\n            errorValue = !!e && e || new Error(e);\n        }\n        if (errored) {\n            this.unsubscribe();\n            return errorValue;\n        }\n    };\n    /** @deprecated internal use only */ AsyncAction.prototype._unsubscribe = function () {\n        var id = this.id;\n        var scheduler = this.scheduler;\n        var actions = scheduler.actions;\n        var index = actions.indexOf(this);\n        this.work = null;\n        this.state = null;\n        this.pending = false;\n        this.scheduler = null;\n        if (index !== -1) {\n            actions.splice(index, 1);\n        }\n        if (id != null) {\n            this.id = this.recycleAsyncId(scheduler, id, null);\n        }\n        this.delay = null;\n    };\n    return AsyncAction;\n}(Action_1.Action));\nexports.AsyncAction = AsyncAction;\n//# sourceMappingURL=AsyncAction.js.map\n\n/***/ },\n/* 32 */\n/***/ function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Scheduler_1 = __webpack_require__(18);\nvar AsyncScheduler = (function (_super) {\n    __extends(AsyncScheduler, _super);\n    function AsyncScheduler() {\n        _super.apply(this, arguments);\n        this.actions = [];\n        /**\n         * A flag to indicate whether the Scheduler is currently executing a batch of\n         * queued actions.\n         * @type {boolean}\n         */\n        this.active = false;\n        /**\n         * An internal ID used to track the latest asynchronous task such as those\n         * coming from `setTimeout`, `setInterval`, `requestAnimationFrame`, and\n         * others.\n         * @type {any}\n         */\n        this.scheduled = undefined;\n    }\n    AsyncScheduler.prototype.flush = function (action) {\n        var actions = this.actions;\n        if (this.active) {\n            actions.push(action);\n            return;\n        }\n        var error;\n        this.active = true;\n        do {\n            if (error = action.execute(action.state, action.delay)) {\n                break;\n            }\n        } while (action = actions.shift()); // exhaust the scheduler queue\n        this.active = false;\n        if (error) {\n            while (action = actions.shift()) {\n                action.unsubscribe();\n            }\n            throw error;\n        }\n    };\n    return AsyncScheduler;\n}(Scheduler_1.Scheduler));\nexports.AsyncScheduler = AsyncScheduler;\n//# sourceMappingURL=AsyncScheduler.js.map\n\n/***/ },\n/* 33 */\n/***/ function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\"use strict\";\nvar AsyncAction_1 = __webpack_require__(31);\nvar AsyncScheduler_1 = __webpack_require__(32);\n/**\n *\n * Async Scheduler\n *\n * <span class=\"informal\">Schedule task as if you used setTimeout(task, duration)</span>\n *\n * `async` scheduler schedules tasks asynchronously, by putting them on the JavaScript\n * event loop queue. It is best used to delay tasks in time or to schedule tasks repeating\n * in intervals.\n *\n * If you just want to \"defer\" task, that is to perform it right after currently\n * executing synchronous code ends (commonly achieved by `setTimeout(deferredTask, 0)`),\n * better choice will be the {@link asap} scheduler.\n *\n * @example <caption>Use async scheduler to delay task</caption>\n * const task = () => console.log('it works!');\n *\n * Rx.Scheduler.async.schedule(task, 2000);\n *\n * // After 2 seconds logs:\n * // \"it works!\"\n *\n *\n * @example <caption>Use async scheduler to repeat task in intervals</caption>\n * function task(state) {\n *   console.log(state);\n *   this.schedule(state + 1, 1000); // `this` references currently executing Action,\n *                                   // which we reschedule with new state and delay\n * }\n *\n * Rx.Scheduler.async.schedule(task, 3000, 0);\n *\n * // Logs:\n * // 0 after 3s\n * // 1 after 4s\n * // 2 after 5s\n * // 3 after 6s\n *\n * @static true\n * @name async\n * @owner Scheduler\n */\nexports.async = new AsyncScheduler_1.AsyncScheduler(AsyncAction_1.AsyncAction);\n//# sourceMappingURL=async.js.map\n\n/***/ },\n/* 34 */\n/***/ function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\"use strict\";\nvar root_1 = __webpack_require__(1);\nfunction symbolIteratorPonyfill(root) {\n    var Symbol = root.Symbol;\n    if (typeof Symbol === 'function') {\n        if (!Symbol.iterator) {\n            Symbol.iterator = Symbol('iterator polyfill');\n        }\n        return Symbol.iterator;\n    }\n    else {\n        // [for Mozilla Gecko 27-35:](https://mzl.la/2ewE1zC)\n        var Set_1 = root.Set;\n        if (Set_1 && typeof new Set_1()['@@iterator'] === 'function') {\n            return '@@iterator';\n        }\n        var Map_1 = root.Map;\n        // required for compatability with es6-shim\n        if (Map_1) {\n            var keys = Object.getOwnPropertyNames(Map_1.prototype);\n            for (var i = 0; i < keys.length; ++i) {\n                var key = keys[i];\n                // according to spec, Map.prototype[@@iterator] and Map.orototype.entries must be equal.\n                if (key !== 'entries' && key !== 'size' && Map_1.prototype[key] === Map_1.prototype['entries']) {\n                    return key;\n                }\n            }\n        }\n        return '@@iterator';\n    }\n}\nexports.symbolIteratorPonyfill = symbolIteratorPonyfill;\nexports.iterator = symbolIteratorPonyfill(root_1.root);\n/**\n * @deprecated use iterator instead\n */\nexports.$$iterator = exports.iterator;\n//# sourceMappingURL=iterator.js.map\n\n/***/ },\n/* 35 */\n/***/ function(module, exports) {\n\n\"use strict\";\n\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\n/**\n * An error thrown when an action is invalid because the object has been\n * unsubscribed.\n *\n * @see {@link Subject}\n * @see {@link BehaviorSubject}\n *\n * @class ObjectUnsubscribedError\n */\nvar ObjectUnsubscribedError = (function (_super) {\n    __extends(ObjectUnsubscribedError, _super);\n    function ObjectUnsubscribedError() {\n        var err = _super.call(this, 'object unsubscribed');\n        this.name = err.name = 'ObjectUnsubscribedError';\n        this.stack = err.stack;\n        this.message = err.message;\n    }\n    return ObjectUnsubscribedError;\n}(Error));\nexports.ObjectUnsubscribedError = ObjectUnsubscribedError;\n//# sourceMappingURL=ObjectUnsubscribedError.js.map\n\n/***/ },\n/* 36 */\n/***/ function(module, exports) {\n\n\"use strict\";\n\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\n/**\n * An error thrown when one or more errors have occurred during the\n * `unsubscribe` of a {@link Subscription}.\n */\nvar UnsubscriptionError = (function (_super) {\n    __extends(UnsubscriptionError, _super);\n    function UnsubscriptionError(errors) {\n        _super.call(this);\n        this.errors = errors;\n        var err = Error.call(this, errors ?\n            errors.length + \" errors occurred during unsubscription:\\n  \" + errors.map(function (err, i) { return ((i + 1) + \") \" + err.toString()); }).join('\\n  ') : '');\n        this.name = err.name = 'UnsubscriptionError';\n        this.stack = err.stack;\n        this.message = err.message;\n    }\n    return UnsubscriptionError;\n}(Error));\nexports.UnsubscriptionError = UnsubscriptionError;\n//# sourceMappingURL=UnsubscriptionError.js.map\n\n/***/ },\n/* 37 */\n/***/ function(module, exports) {\n\n\"use strict\";\n\"use strict\";\nexports.isArray = Array.isArray || (function (x) { return x && typeof x.length === 'number'; });\n//# sourceMappingURL=isArray.js.map\n\n/***/ },\n/* 38 */\n/***/ function(module, exports) {\n\n\"use strict\";\n\"use strict\";\nexports.isArrayLike = (function (x) { return x && typeof x.length === 'number'; });\n//# sourceMappingURL=isArrayLike.js.map\n\n/***/ },\n/* 39 */\n/***/ function(module, exports) {\n\n\"use strict\";\n\"use strict\";\nfunction isPromise(value) {\n    return value && typeof value.subscribe !== 'function' && typeof value.then === 'function';\n}\nexports.isPromise = isPromise;\n//# sourceMappingURL=isPromise.js.map\n\n/***/ },\n/* 40 */\n/***/ function(module, exports) {\n\n\"use strict\";\n\"use strict\";\n/* tslint:disable:no-empty */\nfunction noop() { }\nexports.noop = noop;\n//# sourceMappingURL=noop.js.map\n\n/***/ },\n/* 41 */\n/***/ function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\"use strict\";\nvar noop_1 = __webpack_require__(40);\n/* tslint:enable:max-line-length */\nfunction pipe() {\n    var fns = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        fns[_i - 0] = arguments[_i];\n    }\n    return pipeFromArray(fns);\n}\nexports.pipe = pipe;\n/* @internal */\nfunction pipeFromArray(fns) {\n    if (!fns) {\n        return noop_1.noop;\n    }\n    if (fns.length === 1) {\n        return fns[0];\n    }\n    return function piped(input) {\n        return fns.reduce(function (prev, fn) { return fn(prev); }, input);\n    };\n}\nexports.pipeFromArray = pipeFromArray;\n//# sourceMappingURL=pipe.js.map\n\n/***/ },\n/* 42 */\n/***/ function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\"use strict\";\nvar root_1 = __webpack_require__(1);\nvar isArrayLike_1 = __webpack_require__(38);\nvar isPromise_1 = __webpack_require__(39);\nvar isObject_1 = __webpack_require__(10);\nvar Observable_1 = __webpack_require__(2);\nvar iterator_1 = __webpack_require__(34);\nvar InnerSubscriber_1 = __webpack_require__(16);\nvar observable_1 = __webpack_require__(7);\nfunction subscribeToResult(outerSubscriber, result, outerValue, outerIndex) {\n    var destination = new InnerSubscriber_1.InnerSubscriber(outerSubscriber, outerValue, outerIndex);\n    if (destination.closed) {\n        return null;\n    }\n    if (result instanceof Observable_1.Observable) {\n        if (result._isScalar) {\n            destination.next(result.value);\n            destination.complete();\n            return null;\n        }\n        else {\n            destination.syncErrorThrowable = true;\n            return result.subscribe(destination);\n        }\n    }\n    else if (isArrayLike_1.isArrayLike(result)) {\n        for (var i = 0, len = result.length; i < len && !destination.closed; i++) {\n            destination.next(result[i]);\n        }\n        if (!destination.closed) {\n            destination.complete();\n        }\n    }\n    else if (isPromise_1.isPromise(result)) {\n        result.then(function (value) {\n            if (!destination.closed) {\n                destination.next(value);\n                destination.complete();\n            }\n        }, function (err) { return destination.error(err); })\n            .then(null, function (err) {\n            // Escaping the Promise trap: globally throw unhandled errors\n            root_1.root.setTimeout(function () { throw err; });\n        });\n        return destination;\n    }\n    else if (result && typeof result[iterator_1.iterator] === 'function') {\n        var iterator = result[iterator_1.iterator]();\n        do {\n            var item = iterator.next();\n            if (item.done) {\n                destination.complete();\n                break;\n            }\n            destination.next(item.value);\n            if (destination.closed) {\n                break;\n            }\n        } while (true);\n    }\n    else if (result && typeof result[observable_1.observable] === 'function') {\n        var obs = result[observable_1.observable]();\n        if (typeof obs.subscribe !== 'function') {\n            destination.error(new TypeError('Provided object does not correctly implement Symbol.observable'));\n        }\n        else {\n            return obs.subscribe(new InnerSubscriber_1.InnerSubscriber(outerSubscriber, outerValue, outerIndex));\n        }\n    }\n    else {\n        var value = isObject_1.isObject(result) ? 'an invalid object' : \"'\" + result + \"'\";\n        var msg = (\"You provided \" + value + \" where a stream was expected.\")\n            + ' You can provide an Observable, Promise, Array, or Iterable.';\n        destination.error(new TypeError(msg));\n    }\n    return null;\n}\nexports.subscribeToResult = subscribeToResult;\n//# sourceMappingURL=subscribeToResult.js.map\n\n/***/ },\n/* 43 */\n/***/ function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\"use strict\";\nvar Subscriber_1 = __webpack_require__(0);\nvar rxSubscriber_1 = __webpack_require__(5);\nvar Observer_1 = __webpack_require__(6);\nfunction toSubscriber(nextOrObserver, error, complete) {\n    if (nextOrObserver) {\n        if (nextOrObserver instanceof Subscriber_1.Subscriber) {\n            return nextOrObserver;\n        }\n        if (nextOrObserver[rxSubscriber_1.rxSubscriber]) {\n            return nextOrObserver[rxSubscriber_1.rxSubscriber]();\n        }\n    }\n    if (!nextOrObserver && !error && !complete) {\n        return new Subscriber_1.Subscriber(Observer_1.empty);\n    }\n    return new Subscriber_1.Subscriber(nextOrObserver, error, complete);\n}\nexports.toSubscriber = toSubscriber;\n//# sourceMappingURL=toSubscriber.js.map\n\n/***/ },\n/* 44 */\n/***/ function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\"use strict\";\nvar errorObject_1 = __webpack_require__(8);\nvar tryCatchTarget;\nfunction tryCatcher() {\n    try {\n        return tryCatchTarget.apply(this, arguments);\n    }\n    catch (e) {\n        errorObject_1.errorObject.e = e;\n        return errorObject_1.errorObject;\n    }\n}\nfunction tryCatch(fn) {\n    tryCatchTarget = fn;\n    return tryCatcher;\n}\nexports.tryCatch = tryCatch;\n;\n//# sourceMappingURL=tryCatch.js.map\n\n/***/ },\n/* 45 */\n/***/ function(module, exports, __webpack_require__) {\n\n\"use strict\";\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _cmdBus = __webpack_require__(12);\n\nvar _submodelCmd = __webpack_require__(13);\n\nexports.default = {\n  newCmdBus$: _cmdBus.newCmdBus$,\n  logCmdBus: _cmdBus.logCmdBus,\n  submodelCmd: _submodelCmd.submodelCmd\n};\nmodule.exports = exports['default'];\n\n/***/ }\n/******/ ])\n});\n;\n\n\n// WEBPACK FOOTER //\n// pilota.js"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// identity function for calling harmory imports with the correct context\n \t__webpack_require__.i = function(value) { return value; };\n\n \t// define getter function for harmory exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tObject.defineProperty(exports, name, {\n \t\t\tconfigurable: false,\n \t\t\tenumerable: true,\n \t\t\tget: getter\n \t\t});\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 45);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap 7aa50fd2b29b4df061cc","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar isFunction_1 = require('./util/isFunction');\nvar Subscription_1 = require('./Subscription');\nvar Observer_1 = require('./Observer');\nvar rxSubscriber_1 = require('./symbol/rxSubscriber');\n/**\n * Implements the {@link Observer} interface and extends the\n * {@link Subscription} class. While the {@link Observer} is the public API for\n * consuming the values of an {@link Observable}, all Observers get converted to\n * a Subscriber, in order to provide Subscription-like capabilities such as\n * `unsubscribe`. Subscriber is a common type in RxJS, and crucial for\n * implementing operators, but it is rarely used as a public API.\n *\n * @class Subscriber<T>\n */\nvar Subscriber = (function (_super) {\n    __extends(Subscriber, _super);\n    /**\n     * @param {Observer|function(value: T): void} [destinationOrNext] A partially\n     * defined Observer or a `next` callback function.\n     * @param {function(e: ?any): void} [error] The `error` callback of an\n     * Observer.\n     * @param {function(): void} [complete] The `complete` callback of an\n     * Observer.\n     */\n    function Subscriber(destinationOrNext, error, complete) {\n        _super.call(this);\n        this.syncErrorValue = null;\n        this.syncErrorThrown = false;\n        this.syncErrorThrowable = false;\n        this.isStopped = false;\n        switch (arguments.length) {\n            case 0:\n                this.destination = Observer_1.empty;\n                break;\n            case 1:\n                if (!destinationOrNext) {\n                    this.destination = Observer_1.empty;\n                    break;\n                }\n                if (typeof destinationOrNext === 'object') {\n                    // HACK(benlesh): To resolve an issue where Node users may have multiple\n                    // copies of rxjs in their node_modules directory.\n                    if (isTrustedSubscriber(destinationOrNext)) {\n                        var trustedSubscriber = destinationOrNext[rxSubscriber_1.rxSubscriber]();\n                        this.syncErrorThrowable = trustedSubscriber.syncErrorThrowable;\n                        this.destination = trustedSubscriber;\n                        trustedSubscriber.add(this);\n                    }\n                    else {\n                        this.syncErrorThrowable = true;\n                        this.destination = new SafeSubscriber(this, destinationOrNext);\n                    }\n                    break;\n                }\n            default:\n                this.syncErrorThrowable = true;\n                this.destination = new SafeSubscriber(this, destinationOrNext, error, complete);\n                break;\n        }\n    }\n    Subscriber.prototype[rxSubscriber_1.rxSubscriber] = function () { return this; };\n    /**\n     * A static factory for a Subscriber, given a (potentially partial) definition\n     * of an Observer.\n     * @param {function(x: ?T): void} [next] The `next` callback of an Observer.\n     * @param {function(e: ?any): void} [error] The `error` callback of an\n     * Observer.\n     * @param {function(): void} [complete] The `complete` callback of an\n     * Observer.\n     * @return {Subscriber<T>} A Subscriber wrapping the (partially defined)\n     * Observer represented by the given arguments.\n     */\n    Subscriber.create = function (next, error, complete) {\n        var subscriber = new Subscriber(next, error, complete);\n        subscriber.syncErrorThrowable = false;\n        return subscriber;\n    };\n    /**\n     * The {@link Observer} callback to receive notifications of type `next` from\n     * the Observable, with a value. The Observable may call this method 0 or more\n     * times.\n     * @param {T} [value] The `next` value.\n     * @return {void}\n     */\n    Subscriber.prototype.next = function (value) {\n        if (!this.isStopped) {\n            this._next(value);\n        }\n    };\n    /**\n     * The {@link Observer} callback to receive notifications of type `error` from\n     * the Observable, with an attached {@link Error}. Notifies the Observer that\n     * the Observable has experienced an error condition.\n     * @param {any} [err] The `error` exception.\n     * @return {void}\n     */\n    Subscriber.prototype.error = function (err) {\n        if (!this.isStopped) {\n            this.isStopped = true;\n            this._error(err);\n        }\n    };\n    /**\n     * The {@link Observer} callback to receive a valueless notification of type\n     * `complete` from the Observable. Notifies the Observer that the Observable\n     * has finished sending push-based notifications.\n     * @return {void}\n     */\n    Subscriber.prototype.complete = function () {\n        if (!this.isStopped) {\n            this.isStopped = true;\n            this._complete();\n        }\n    };\n    Subscriber.prototype.unsubscribe = function () {\n        if (this.closed) {\n            return;\n        }\n        this.isStopped = true;\n        _super.prototype.unsubscribe.call(this);\n    };\n    Subscriber.prototype._next = function (value) {\n        this.destination.next(value);\n    };\n    Subscriber.prototype._error = function (err) {\n        this.destination.error(err);\n        this.unsubscribe();\n    };\n    Subscriber.prototype._complete = function () {\n        this.destination.complete();\n        this.unsubscribe();\n    };\n    /** @deprecated internal use only */ Subscriber.prototype._unsubscribeAndRecycle = function () {\n        var _a = this, _parent = _a._parent, _parents = _a._parents;\n        this._parent = null;\n        this._parents = null;\n        this.unsubscribe();\n        this.closed = false;\n        this.isStopped = false;\n        this._parent = _parent;\n        this._parents = _parents;\n        return this;\n    };\n    return Subscriber;\n}(Subscription_1.Subscription));\nexports.Subscriber = Subscriber;\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar SafeSubscriber = (function (_super) {\n    __extends(SafeSubscriber, _super);\n    function SafeSubscriber(_parentSubscriber, observerOrNext, error, complete) {\n        _super.call(this);\n        this._parentSubscriber = _parentSubscriber;\n        var next;\n        var context = this;\n        if (isFunction_1.isFunction(observerOrNext)) {\n            next = observerOrNext;\n        }\n        else if (observerOrNext) {\n            next = observerOrNext.next;\n            error = observerOrNext.error;\n            complete = observerOrNext.complete;\n            if (observerOrNext !== Observer_1.empty) {\n                context = Object.create(observerOrNext);\n                if (isFunction_1.isFunction(context.unsubscribe)) {\n                    this.add(context.unsubscribe.bind(context));\n                }\n                context.unsubscribe = this.unsubscribe.bind(this);\n            }\n        }\n        this._context = context;\n        this._next = next;\n        this._error = error;\n        this._complete = complete;\n    }\n    SafeSubscriber.prototype.next = function (value) {\n        if (!this.isStopped && this._next) {\n            var _parentSubscriber = this._parentSubscriber;\n            if (!_parentSubscriber.syncErrorThrowable) {\n                this.__tryOrUnsub(this._next, value);\n            }\n            else if (this.__tryOrSetError(_parentSubscriber, this._next, value)) {\n                this.unsubscribe();\n            }\n        }\n    };\n    SafeSubscriber.prototype.error = function (err) {\n        if (!this.isStopped) {\n            var _parentSubscriber = this._parentSubscriber;\n            if (this._error) {\n                if (!_parentSubscriber.syncErrorThrowable) {\n                    this.__tryOrUnsub(this._error, err);\n                    this.unsubscribe();\n                }\n                else {\n                    this.__tryOrSetError(_parentSubscriber, this._error, err);\n                    this.unsubscribe();\n                }\n            }\n            else if (!_parentSubscriber.syncErrorThrowable) {\n                this.unsubscribe();\n                throw err;\n            }\n            else {\n                _parentSubscriber.syncErrorValue = err;\n                _parentSubscriber.syncErrorThrown = true;\n                this.unsubscribe();\n            }\n        }\n    };\n    SafeSubscriber.prototype.complete = function () {\n        var _this = this;\n        if (!this.isStopped) {\n            var _parentSubscriber = this._parentSubscriber;\n            if (this._complete) {\n                var wrappedComplete = function () { return _this._complete.call(_this._context); };\n                if (!_parentSubscriber.syncErrorThrowable) {\n                    this.__tryOrUnsub(wrappedComplete);\n                    this.unsubscribe();\n                }\n                else {\n                    this.__tryOrSetError(_parentSubscriber, wrappedComplete);\n                    this.unsubscribe();\n                }\n            }\n            else {\n                this.unsubscribe();\n            }\n        }\n    };\n    SafeSubscriber.prototype.__tryOrUnsub = function (fn, value) {\n        try {\n            fn.call(this._context, value);\n        }\n        catch (err) {\n            this.unsubscribe();\n            throw err;\n        }\n    };\n    SafeSubscriber.prototype.__tryOrSetError = function (parent, fn, value) {\n        try {\n            fn.call(this._context, value);\n        }\n        catch (err) {\n            parent.syncErrorValue = err;\n            parent.syncErrorThrown = true;\n            return true;\n        }\n        return false;\n    };\n    /** @deprecated internal use only */ SafeSubscriber.prototype._unsubscribe = function () {\n        var _parentSubscriber = this._parentSubscriber;\n        this._context = null;\n        this._parentSubscriber = null;\n        _parentSubscriber.unsubscribe();\n    };\n    return SafeSubscriber;\n}(Subscriber));\nfunction isTrustedSubscriber(obj) {\n    return obj instanceof Subscriber || ('syncErrorThrowable' in obj && obj[rxSubscriber_1.rxSubscriber]);\n}\n//# sourceMappingURL=Subscriber.js.map\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/rxjs/Subscriber.js\n// module id = 0\n// module chunks = 0","\"use strict\";\n// CommonJS / Node have global context exposed as \"global\" variable.\n// We don't want to include the whole node.d.ts this this compilation unit so we'll just fake\n// the global \"global\" var for now.\nvar __window = typeof window !== 'undefined' && window;\nvar __self = typeof self !== 'undefined' && typeof WorkerGlobalScope !== 'undefined' &&\n    self instanceof WorkerGlobalScope && self;\nvar __global = typeof global !== 'undefined' && global;\nvar _root = __window || __global || __self;\nexports.root = _root;\n// Workaround Closure Compiler restriction: The body of a goog.module cannot use throw.\n// This is needed when used with angular/tsickle which inserts a goog.module statement.\n// Wrap in IIFE\n(function () {\n    if (!_root) {\n        throw new Error('RxJS could not find any global context (window, self, global)');\n    }\n})();\n//# sourceMappingURL=root.js.map\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/rxjs/util/root.js\n// module id = 1\n// module chunks = 0","\"use strict\";\nvar root_1 = require('./util/root');\nvar toSubscriber_1 = require('./util/toSubscriber');\nvar observable_1 = require('./symbol/observable');\nvar pipe_1 = require('./util/pipe');\n/**\n * A representation of any set of values over any amount of time. This is the most basic building block\n * of RxJS.\n *\n * @class Observable<T>\n */\nvar Observable = (function () {\n    /**\n     * @constructor\n     * @param {Function} subscribe the function that is called when the Observable is\n     * initially subscribed to. This function is given a Subscriber, to which new values\n     * can be `next`ed, or an `error` method can be called to raise an error, or\n     * `complete` can be called to notify of a successful completion.\n     */\n    function Observable(subscribe) {\n        this._isScalar = false;\n        if (subscribe) {\n            this._subscribe = subscribe;\n        }\n    }\n    /**\n     * Creates a new Observable, with this Observable as the source, and the passed\n     * operator defined as the new observable's operator.\n     * @method lift\n     * @param {Operator} operator the operator defining the operation to take on the observable\n     * @return {Observable} a new observable with the Operator applied\n     */\n    Observable.prototype.lift = function (operator) {\n        var observable = new Observable();\n        observable.source = this;\n        observable.operator = operator;\n        return observable;\n    };\n    /**\n     * Invokes an execution of an Observable and registers Observer handlers for notifications it will emit.\n     *\n     * <span class=\"informal\">Use it when you have all these Observables, but still nothing is happening.</span>\n     *\n     * `subscribe` is not a regular operator, but a method that calls Observable's internal `subscribe` function. It\n     * might be for example a function that you passed to a {@link create} static factory, but most of the time it is\n     * a library implementation, which defines what and when will be emitted by an Observable. This means that calling\n     * `subscribe` is actually the moment when Observable starts its work, not when it is created, as it is often\n     * thought.\n     *\n     * Apart from starting the execution of an Observable, this method allows you to listen for values\n     * that an Observable emits, as well as for when it completes or errors. You can achieve this in two\n     * following ways.\n     *\n     * The first way is creating an object that implements {@link Observer} interface. It should have methods\n     * defined by that interface, but note that it should be just a regular JavaScript object, which you can create\n     * yourself in any way you want (ES6 class, classic function constructor, object literal etc.). In particular do\n     * not attempt to use any RxJS implementation details to create Observers - you don't need them. Remember also\n     * that your object does not have to implement all methods. If you find yourself creating a method that doesn't\n     * do anything, you can simply omit it. Note however, that if `error` method is not provided, all errors will\n     * be left uncaught.\n     *\n     * The second way is to give up on Observer object altogether and simply provide callback functions in place of its methods.\n     * This means you can provide three functions as arguments to `subscribe`, where first function is equivalent\n     * of a `next` method, second of an `error` method and third of a `complete` method. Just as in case of Observer,\n     * if you do not need to listen for something, you can omit a function, preferably by passing `undefined` or `null`,\n     * since `subscribe` recognizes these functions by where they were placed in function call. When it comes\n     * to `error` function, just as before, if not provided, errors emitted by an Observable will be thrown.\n     *\n     * Whatever style of calling `subscribe` you use, in both cases it returns a Subscription object.\n     * This object allows you to call `unsubscribe` on it, which in turn will stop work that an Observable does and will clean\n     * up all resources that an Observable used. Note that cancelling a subscription will not call `complete` callback\n     * provided to `subscribe` function, which is reserved for a regular completion signal that comes from an Observable.\n     *\n     * Remember that callbacks provided to `subscribe` are not guaranteed to be called asynchronously.\n     * It is an Observable itself that decides when these functions will be called. For example {@link of}\n     * by default emits all its values synchronously. Always check documentation for how given Observable\n     * will behave when subscribed and if its default behavior can be modified with a {@link Scheduler}.\n     *\n     * @example <caption>Subscribe with an Observer</caption>\n     * const sumObserver = {\n     *   sum: 0,\n     *   next(value) {\n     *     console.log('Adding: ' + value);\n     *     this.sum = this.sum + value;\n     *   },\n     *   error() { // We actually could just remove this method,\n     *   },        // since we do not really care about errors right now.\n     *   complete() {\n     *     console.log('Sum equals: ' + this.sum);\n     *   }\n     * };\n     *\n     * Rx.Observable.of(1, 2, 3) // Synchronously emits 1, 2, 3 and then completes.\n     * .subscribe(sumObserver);\n     *\n     * // Logs:\n     * // \"Adding: 1\"\n     * // \"Adding: 2\"\n     * // \"Adding: 3\"\n     * // \"Sum equals: 6\"\n     *\n     *\n     * @example <caption>Subscribe with functions</caption>\n     * let sum = 0;\n     *\n     * Rx.Observable.of(1, 2, 3)\n     * .subscribe(\n     *   function(value) {\n     *     console.log('Adding: ' + value);\n     *     sum = sum + value;\n     *   },\n     *   undefined,\n     *   function() {\n     *     console.log('Sum equals: ' + sum);\n     *   }\n     * );\n     *\n     * // Logs:\n     * // \"Adding: 1\"\n     * // \"Adding: 2\"\n     * // \"Adding: 3\"\n     * // \"Sum equals: 6\"\n     *\n     *\n     * @example <caption>Cancel a subscription</caption>\n     * const subscription = Rx.Observable.interval(1000).subscribe(\n     *   num => console.log(num),\n     *   undefined,\n     *   () => console.log('completed!') // Will not be called, even\n     * );                                // when cancelling subscription\n     *\n     *\n     * setTimeout(() => {\n     *   subscription.unsubscribe();\n     *   console.log('unsubscribed!');\n     * }, 2500);\n     *\n     * // Logs:\n     * // 0 after 1s\n     * // 1 after 2s\n     * // \"unsubscribed!\" after 2.5s\n     *\n     *\n     * @param {Observer|Function} observerOrNext (optional) Either an observer with methods to be called,\n     *  or the first of three possible handlers, which is the handler for each value emitted from the subscribed\n     *  Observable.\n     * @param {Function} error (optional) A handler for a terminal event resulting from an error. If no error handler is provided,\n     *  the error will be thrown as unhandled.\n     * @param {Function} complete (optional) A handler for a terminal event resulting from successful completion.\n     * @return {ISubscription} a subscription reference to the registered handlers\n     * @method subscribe\n     */\n    Observable.prototype.subscribe = function (observerOrNext, error, complete) {\n        var operator = this.operator;\n        var sink = toSubscriber_1.toSubscriber(observerOrNext, error, complete);\n        if (operator) {\n            operator.call(sink, this.source);\n        }\n        else {\n            sink.add(this.source || !sink.syncErrorThrowable ? this._subscribe(sink) : this._trySubscribe(sink));\n        }\n        if (sink.syncErrorThrowable) {\n            sink.syncErrorThrowable = false;\n            if (sink.syncErrorThrown) {\n                throw sink.syncErrorValue;\n            }\n        }\n        return sink;\n    };\n    Observable.prototype._trySubscribe = function (sink) {\n        try {\n            return this._subscribe(sink);\n        }\n        catch (err) {\n            sink.syncErrorThrown = true;\n            sink.syncErrorValue = err;\n            sink.error(err);\n        }\n    };\n    /**\n     * @method forEach\n     * @param {Function} next a handler for each value emitted by the observable\n     * @param {PromiseConstructor} [PromiseCtor] a constructor function used to instantiate the Promise\n     * @return {Promise} a promise that either resolves on observable completion or\n     *  rejects with the handled error\n     */\n    Observable.prototype.forEach = function (next, PromiseCtor) {\n        var _this = this;\n        if (!PromiseCtor) {\n            if (root_1.root.Rx && root_1.root.Rx.config && root_1.root.Rx.config.Promise) {\n                PromiseCtor = root_1.root.Rx.config.Promise;\n            }\n            else if (root_1.root.Promise) {\n                PromiseCtor = root_1.root.Promise;\n            }\n        }\n        if (!PromiseCtor) {\n            throw new Error('no Promise impl found');\n        }\n        return new PromiseCtor(function (resolve, reject) {\n            // Must be declared in a separate statement to avoid a RefernceError when\n            // accessing subscription below in the closure due to Temporal Dead Zone.\n            var subscription;\n            subscription = _this.subscribe(function (value) {\n                if (subscription) {\n                    // if there is a subscription, then we can surmise\n                    // the next handling is asynchronous. Any errors thrown\n                    // need to be rejected explicitly and unsubscribe must be\n                    // called manually\n                    try {\n                        next(value);\n                    }\n                    catch (err) {\n                        reject(err);\n                        subscription.unsubscribe();\n                    }\n                }\n                else {\n                    // if there is NO subscription, then we're getting a nexted\n                    // value synchronously during subscription. We can just call it.\n                    // If it errors, Observable's `subscribe` will ensure the\n                    // unsubscription logic is called, then synchronously rethrow the error.\n                    // After that, Promise will trap the error and send it\n                    // down the rejection path.\n                    next(value);\n                }\n            }, reject, resolve);\n        });\n    };\n    /** @deprecated internal use only */ Observable.prototype._subscribe = function (subscriber) {\n        return this.source.subscribe(subscriber);\n    };\n    /**\n     * An interop point defined by the es7-observable spec https://github.com/zenparsing/es-observable\n     * @method Symbol.observable\n     * @return {Observable} this instance of the observable\n     */\n    Observable.prototype[observable_1.observable] = function () {\n        return this;\n    };\n    /* tslint:enable:max-line-length */\n    /**\n     * Used to stitch together functional operators into a chain.\n     * @method pipe\n     * @return {Observable} the Observable result of all of the operators having\n     * been called in the order they were passed in.\n     *\n     * @example\n     *\n     * import { map, filter, scan } from 'rxjs/operators';\n     *\n     * Rx.Observable.interval(1000)\n     *   .pipe(\n     *     filter(x => x % 2 === 0),\n     *     map(x => x + x),\n     *     scan((acc, x) => acc + x)\n     *   )\n     *   .subscribe(x => console.log(x))\n     */\n    Observable.prototype.pipe = function () {\n        var operations = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            operations[_i - 0] = arguments[_i];\n        }\n        if (operations.length === 0) {\n            return this;\n        }\n        return pipe_1.pipeFromArray(operations)(this);\n    };\n    /* tslint:enable:max-line-length */\n    Observable.prototype.toPromise = function (PromiseCtor) {\n        var _this = this;\n        if (!PromiseCtor) {\n            if (root_1.root.Rx && root_1.root.Rx.config && root_1.root.Rx.config.Promise) {\n                PromiseCtor = root_1.root.Rx.config.Promise;\n            }\n            else if (root_1.root.Promise) {\n                PromiseCtor = root_1.root.Promise;\n            }\n        }\n        if (!PromiseCtor) {\n            throw new Error('no Promise impl found');\n        }\n        return new PromiseCtor(function (resolve, reject) {\n            var value;\n            _this.subscribe(function (x) { return value = x; }, function (err) { return reject(err); }, function () { return resolve(value); });\n        });\n    };\n    // HACK: Since TypeScript inherits static properties too, we have to\n    // fight against TypeScript here so Subject can have a different static create signature\n    /**\n     * Creates a new cold Observable by calling the Observable constructor\n     * @static true\n     * @owner Observable\n     * @method create\n     * @param {Function} subscribe? the subscriber function to be passed to the Observable constructor\n     * @return {Observable} a new cold observable\n     */\n    Observable.create = function (subscribe) {\n        return new Observable(subscribe);\n    };\n    return Observable;\n}());\nexports.Observable = Observable;\n//# sourceMappingURL=Observable.js.map\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/rxjs/Observable.js\n// module id = 2\n// module chunks = 0","\"use strict\";\nvar isArray_1 = require('./util/isArray');\nvar isObject_1 = require('./util/isObject');\nvar isFunction_1 = require('./util/isFunction');\nvar tryCatch_1 = require('./util/tryCatch');\nvar errorObject_1 = require('./util/errorObject');\nvar UnsubscriptionError_1 = require('./util/UnsubscriptionError');\n/**\n * Represents a disposable resource, such as the execution of an Observable. A\n * Subscription has one important method, `unsubscribe`, that takes no argument\n * and just disposes the resource held by the subscription.\n *\n * Additionally, subscriptions may be grouped together through the `add()`\n * method, which will attach a child Subscription to the current Subscription.\n * When a Subscription is unsubscribed, all its children (and its grandchildren)\n * will be unsubscribed as well.\n *\n * @class Subscription\n */\nvar Subscription = (function () {\n    /**\n     * @param {function(): void} [unsubscribe] A function describing how to\n     * perform the disposal of resources when the `unsubscribe` method is called.\n     */\n    function Subscription(unsubscribe) {\n        /**\n         * A flag to indicate whether this Subscription has already been unsubscribed.\n         * @type {boolean}\n         */\n        this.closed = false;\n        this._parent = null;\n        this._parents = null;\n        this._subscriptions = null;\n        if (unsubscribe) {\n            this._unsubscribe = unsubscribe;\n        }\n    }\n    /**\n     * Disposes the resources held by the subscription. May, for instance, cancel\n     * an ongoing Observable execution or cancel any other type of work that\n     * started when the Subscription was created.\n     * @return {void}\n     */\n    Subscription.prototype.unsubscribe = function () {\n        var hasErrors = false;\n        var errors;\n        if (this.closed) {\n            return;\n        }\n        var _a = this, _parent = _a._parent, _parents = _a._parents, _unsubscribe = _a._unsubscribe, _subscriptions = _a._subscriptions;\n        this.closed = true;\n        this._parent = null;\n        this._parents = null;\n        // null out _subscriptions first so any child subscriptions that attempt\n        // to remove themselves from this subscription will noop\n        this._subscriptions = null;\n        var index = -1;\n        var len = _parents ? _parents.length : 0;\n        // if this._parent is null, then so is this._parents, and we\n        // don't have to remove ourselves from any parent subscriptions.\n        while (_parent) {\n            _parent.remove(this);\n            // if this._parents is null or index >= len,\n            // then _parent is set to null, and the loop exits\n            _parent = ++index < len && _parents[index] || null;\n        }\n        if (isFunction_1.isFunction(_unsubscribe)) {\n            var trial = tryCatch_1.tryCatch(_unsubscribe).call(this);\n            if (trial === errorObject_1.errorObject) {\n                hasErrors = true;\n                errors = errors || (errorObject_1.errorObject.e instanceof UnsubscriptionError_1.UnsubscriptionError ?\n                    flattenUnsubscriptionErrors(errorObject_1.errorObject.e.errors) : [errorObject_1.errorObject.e]);\n            }\n        }\n        if (isArray_1.isArray(_subscriptions)) {\n            index = -1;\n            len = _subscriptions.length;\n            while (++index < len) {\n                var sub = _subscriptions[index];\n                if (isObject_1.isObject(sub)) {\n                    var trial = tryCatch_1.tryCatch(sub.unsubscribe).call(sub);\n                    if (trial === errorObject_1.errorObject) {\n                        hasErrors = true;\n                        errors = errors || [];\n                        var err = errorObject_1.errorObject.e;\n                        if (err instanceof UnsubscriptionError_1.UnsubscriptionError) {\n                            errors = errors.concat(flattenUnsubscriptionErrors(err.errors));\n                        }\n                        else {\n                            errors.push(err);\n                        }\n                    }\n                }\n            }\n        }\n        if (hasErrors) {\n            throw new UnsubscriptionError_1.UnsubscriptionError(errors);\n        }\n    };\n    /**\n     * Adds a tear down to be called during the unsubscribe() of this\n     * Subscription.\n     *\n     * If the tear down being added is a subscription that is already\n     * unsubscribed, is the same reference `add` is being called on, or is\n     * `Subscription.EMPTY`, it will not be added.\n     *\n     * If this subscription is already in an `closed` state, the passed\n     * tear down logic will be executed immediately.\n     *\n     * @param {TeardownLogic} teardown The additional logic to execute on\n     * teardown.\n     * @return {Subscription} Returns the Subscription used or created to be\n     * added to the inner subscriptions list. This Subscription can be used with\n     * `remove()` to remove the passed teardown logic from the inner subscriptions\n     * list.\n     */\n    Subscription.prototype.add = function (teardown) {\n        if (!teardown || (teardown === Subscription.EMPTY)) {\n            return Subscription.EMPTY;\n        }\n        if (teardown === this) {\n            return this;\n        }\n        var subscription = teardown;\n        switch (typeof teardown) {\n            case 'function':\n                subscription = new Subscription(teardown);\n            case 'object':\n                if (subscription.closed || typeof subscription.unsubscribe !== 'function') {\n                    return subscription;\n                }\n                else if (this.closed) {\n                    subscription.unsubscribe();\n                    return subscription;\n                }\n                else if (typeof subscription._addParent !== 'function' /* quack quack */) {\n                    var tmp = subscription;\n                    subscription = new Subscription();\n                    subscription._subscriptions = [tmp];\n                }\n                break;\n            default:\n                throw new Error('unrecognized teardown ' + teardown + ' added to Subscription.');\n        }\n        var subscriptions = this._subscriptions || (this._subscriptions = []);\n        subscriptions.push(subscription);\n        subscription._addParent(this);\n        return subscription;\n    };\n    /**\n     * Removes a Subscription from the internal list of subscriptions that will\n     * unsubscribe during the unsubscribe process of this Subscription.\n     * @param {Subscription} subscription The subscription to remove.\n     * @return {void}\n     */\n    Subscription.prototype.remove = function (subscription) {\n        var subscriptions = this._subscriptions;\n        if (subscriptions) {\n            var subscriptionIndex = subscriptions.indexOf(subscription);\n            if (subscriptionIndex !== -1) {\n                subscriptions.splice(subscriptionIndex, 1);\n            }\n        }\n    };\n    Subscription.prototype._addParent = function (parent) {\n        var _a = this, _parent = _a._parent, _parents = _a._parents;\n        if (!_parent || _parent === parent) {\n            // If we don't have a parent, or the new parent is the same as the\n            // current parent, then set this._parent to the new parent.\n            this._parent = parent;\n        }\n        else if (!_parents) {\n            // If there's already one parent, but not multiple, allocate an Array to\n            // store the rest of the parent Subscriptions.\n            this._parents = [parent];\n        }\n        else if (_parents.indexOf(parent) === -1) {\n            // Only add the new parent to the _parents list if it's not already there.\n            _parents.push(parent);\n        }\n    };\n    Subscription.EMPTY = (function (empty) {\n        empty.closed = true;\n        return empty;\n    }(new Subscription()));\n    return Subscription;\n}());\nexports.Subscription = Subscription;\nfunction flattenUnsubscriptionErrors(errors) {\n    return errors.reduce(function (errs, err) { return errs.concat((err instanceof UnsubscriptionError_1.UnsubscriptionError) ? err.errors : err); }, []);\n}\n//# sourceMappingURL=Subscription.js.map\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/rxjs/Subscription.js\n// module id = 3\n// module chunks = 0","export function precondition(x, msg) {\n  if (!x) throw msg\n}\n\nexport function isFunction(x) {\n  return typeof x === 'function'\n}\n\nexport function subscribeLog(observable$, name) {\n  observable$.subscribe(\n    function(v) {\n      global.console.log(`${name}.next:`, v)\n    },\n    function(v) {\n      global.console.log(`${name}.error:`, v)\n    },\n    function(v) {\n      global.console.log(`${name}.complete:`, v)\n    }\n  )\n}\n\n\n\n\n// WEBPACK FOOTER //\n// ./src/util.js","\"use strict\";\nvar root_1 = require('../util/root');\nvar Symbol = root_1.root.Symbol;\nexports.rxSubscriber = (typeof Symbol === 'function' && typeof Symbol.for === 'function') ?\n    Symbol.for('rxSubscriber') : '@@rxSubscriber';\n/**\n * @deprecated use rxSubscriber instead\n */\nexports.$$rxSubscriber = exports.rxSubscriber;\n//# sourceMappingURL=rxSubscriber.js.map\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/rxjs/symbol/rxSubscriber.js\n// module id = 5\n// module chunks = 0","\"use strict\";\nexports.empty = {\n    closed: true,\n    next: function (value) { },\n    error: function (err) { throw err; },\n    complete: function () { }\n};\n//# sourceMappingURL=Observer.js.map\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/rxjs/Observer.js\n// module id = 6\n// module chunks = 0","\"use strict\";\nvar root_1 = require('../util/root');\nfunction getSymbolObservable(context) {\n    var $$observable;\n    var Symbol = context.Symbol;\n    if (typeof Symbol === 'function') {\n        if (Symbol.observable) {\n            $$observable = Symbol.observable;\n        }\n        else {\n            $$observable = Symbol('observable');\n            Symbol.observable = $$observable;\n        }\n    }\n    else {\n        $$observable = '@@observable';\n    }\n    return $$observable;\n}\nexports.getSymbolObservable = getSymbolObservable;\nexports.observable = getSymbolObservable(root_1.root);\n/**\n * @deprecated use observable instead\n */\nexports.$$observable = exports.observable;\n//# sourceMappingURL=observable.js.map\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/rxjs/symbol/observable.js\n// module id = 7\n// module chunks = 0","\"use strict\";\n// typeof any so that it we don't have to cast when comparing a result to the error object\nexports.errorObject = { e: {} };\n//# sourceMappingURL=errorObject.js.map\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/rxjs/util/errorObject.js\n// module id = 8\n// module chunks = 0","\"use strict\";\nfunction isFunction(x) {\n    return typeof x === 'function';\n}\nexports.isFunction = isFunction;\n//# sourceMappingURL=isFunction.js.map\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/rxjs/util/isFunction.js\n// module id = 9\n// module chunks = 0","\"use strict\";\nfunction isObject(x) {\n    return x != null && typeof x === 'object';\n}\nexports.isObject = isObject;\n//# sourceMappingURL=isObject.js.map\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/rxjs/util/isObject.js\n// module id = 10\n// module chunks = 0","var g;\r\n\r\n// This works in non-strict mode\r\ng = (function() { return this; })();\r\n\r\ntry {\r\n\t// This works if eval is allowed (see CSP)\r\n\tg = g || Function(\"return this\")() || (1,eval)(\"this\");\r\n} catch(e) {\r\n\t// This works if the window reference is available\r\n\tif(typeof window === \"object\")\r\n\t\tg = window;\r\n}\r\n\r\n// g can still be undefined, but nothing to do about it...\r\n// We return undefined, instead of nothing here, so it's\r\n// easier to handle this case. if(!global) { ...}\r\n\r\nmodule.exports = g;\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// (webpack)/buildin/global.js\n// module id = 11\n// module chunks = 0","import {Subject} from 'rxjs/Subject'\nimport 'rxjs/add/operator/map'\nimport 'rxjs/add/operator/filter'\nimport 'rxjs/add/operator/withLatestFrom'\nimport {async} from 'rxjs/scheduler/async'\nimport {subscribeLog, isFunction} from './util.js'\nimport {newObjectResolver} from './resolver.js'\nimport {newDispatcher} from './dispatcher.js'\n\n/*\n Bus to dispatch and apply commands to the state stream.\n\n state$ -- an Observable and Observer\n\n dispatch -- One of the following:\n\n * null or undefined -- returned cmdBus does no dispatching in the given\n state. The caller can add command handlers calling `addHandler`.\n\n * object -- a map of command names to handling functions\n\n * a dispatcher function -- a function that will handle the commands. The signature\n is `(state, cmd) => state`. The name of the command is available as `name` property.\n\n */\n\nexport function newCmdBus$(state$, dispatch) {\n\n  const cmdBus$ = new Subject(async)\n\n  if (isFunction(dispatch)) {\n    cmdBus$.dispatch = dispatch\n  } else {\n    const resolver     = newObjectResolver(dispatch)\n    cmdBus$.dispatch   = newDispatcher(resolver)\n    cmdBus$.addHandler = resolver.addHandler\n    cmdBus$.on         = cmdBus$.addHandler // alias\n  }\n\n  cmdBus$\n      .map((cmd) => typeof cmd == 'string' ? {name: cmd} : cmd)\n      .withLatestFrom(state$, (cmd, state) => cmdBus$.dispatch(state, cmd))\n      .filter(x => x !== undefined)\n      .subscribe(state$)\n\n  return cmdBus$\n}\n\nexport function logCmdBus(cmdBus$) {\n  subscribeLog(cmdBus$, 'cmdBus$')\n}\n\n\n\n\n\n\n// WEBPACK FOOTER //\n// ./src/cmdBus.js","export function submodelCmd(property, fn) {\n  if (typeof fn != 'undefined') {\n    return function(state, ...props) {\n      const result     = Object.assign({}, state)\n      result[property] = fn(state[property], ...props)\n      return result\n    }\n  } else {\n    // If no property is provided, then we return a partially applied fn.\n    fn = property\n    return function(property) {\n      return submodelCmd(property, fn)\n    }\n  }\n}\n\n\n\n\n\n// WEBPACK FOOTER //\n// ./src/submodelCmd.js","import {precondition, isFunction} from './util.js'\n\n\n/*\n The Dispatcher is responsible for dispatching the event to all EventManagers.\n */\nexport function newDispatcher(resolver) {\n  precondition(resolver, 'resolver is required for a dispatcher')\n  precondition(isFunction(resolver), 'resolver must be a function')\n\n  const dispatch      = function(state, cmdObject) {\n    const fn = resolver(cmdObject.name)\n    return fn ? fn.call(cmdObject, state, cmdObject) : undefined\n  }\n  dispatch.addHandler = resolver.addHandler // OK if `resolver.addHandler` is undefined\n  return dispatch\n}\n\n\n\n\n// WEBPACK FOOTER //\n// ./src/dispatcher.js","/*\n Uses an object to map commands to handler functions. What is an\n object anyway?\n\n Returns a function that can be used by a dispatcher,  with\n the signature:\n\n ```\n (String) => Fn(State, CmdObject)\n ```\n */\n\nimport { precondition, isFunction } from './util.js'\n\nexport function newObjectResolver(mapping) {\n\n  const handlers = Object.assign({}, mapping)\n\n  const resolver = function(name) {\n    return handlers[name] || handlers['*']\n  }\n\n  resolver.addHandler = function(cmdName, handler) {\n    precondition(cmdName, 'requires a command name')\n    precondition(isFunction(handler), 'requires a projection function')\n    handlers[cmdName] = handler\n  }\n\n  return resolver\n}\n\n\n\n\n// WEBPACK FOOTER //\n// ./src/resolver.js","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Subscriber_1 = require('./Subscriber');\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar InnerSubscriber = (function (_super) {\n    __extends(InnerSubscriber, _super);\n    function InnerSubscriber(parent, outerValue, outerIndex) {\n        _super.call(this);\n        this.parent = parent;\n        this.outerValue = outerValue;\n        this.outerIndex = outerIndex;\n        this.index = 0;\n    }\n    InnerSubscriber.prototype._next = function (value) {\n        this.parent.notifyNext(this.outerValue, value, this.outerIndex, this.index++, this);\n    };\n    InnerSubscriber.prototype._error = function (error) {\n        this.parent.notifyError(error, this);\n        this.unsubscribe();\n    };\n    InnerSubscriber.prototype._complete = function () {\n        this.parent.notifyComplete(this);\n        this.unsubscribe();\n    };\n    return InnerSubscriber;\n}(Subscriber_1.Subscriber));\nexports.InnerSubscriber = InnerSubscriber;\n//# sourceMappingURL=InnerSubscriber.js.map\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/rxjs/InnerSubscriber.js\n// module id = 16\n// module chunks = 0","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Subscriber_1 = require('./Subscriber');\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar OuterSubscriber = (function (_super) {\n    __extends(OuterSubscriber, _super);\n    function OuterSubscriber() {\n        _super.apply(this, arguments);\n    }\n    OuterSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n        this.destination.next(innerValue);\n    };\n    OuterSubscriber.prototype.notifyError = function (error, innerSub) {\n        this.destination.error(error);\n    };\n    OuterSubscriber.prototype.notifyComplete = function (innerSub) {\n        this.destination.complete();\n    };\n    return OuterSubscriber;\n}(Subscriber_1.Subscriber));\nexports.OuterSubscriber = OuterSubscriber;\n//# sourceMappingURL=OuterSubscriber.js.map\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/rxjs/OuterSubscriber.js\n// module id = 17\n// module chunks = 0","\"use strict\";\n/**\n * An execution context and a data structure to order tasks and schedule their\n * execution. Provides a notion of (potentially virtual) time, through the\n * `now()` getter method.\n *\n * Each unit of work in a Scheduler is called an {@link Action}.\n *\n * ```ts\n * class Scheduler {\n *   now(): number;\n *   schedule(work, delay?, state?): Subscription;\n * }\n * ```\n *\n * @class Scheduler\n */\nvar Scheduler = (function () {\n    function Scheduler(SchedulerAction, now) {\n        if (now === void 0) { now = Scheduler.now; }\n        this.SchedulerAction = SchedulerAction;\n        this.now = now;\n    }\n    /**\n     * Schedules a function, `work`, for execution. May happen at some point in\n     * the future, according to the `delay` parameter, if specified. May be passed\n     * some context object, `state`, which will be passed to the `work` function.\n     *\n     * The given arguments will be processed an stored as an Action object in a\n     * queue of actions.\n     *\n     * @param {function(state: ?T): ?Subscription} work A function representing a\n     * task, or some unit of work to be executed by the Scheduler.\n     * @param {number} [delay] Time to wait before executing the work, where the\n     * time unit is implicit and defined by the Scheduler itself.\n     * @param {T} [state] Some contextual data that the `work` function uses when\n     * called by the Scheduler.\n     * @return {Subscription} A subscription in order to be able to unsubscribe\n     * the scheduled work.\n     */\n    Scheduler.prototype.schedule = function (work, delay, state) {\n        if (delay === void 0) { delay = 0; }\n        return new this.SchedulerAction(this, work).schedule(state, delay);\n    };\n    Scheduler.now = Date.now ? Date.now : function () { return +new Date(); };\n    return Scheduler;\n}());\nexports.Scheduler = Scheduler;\n//# sourceMappingURL=Scheduler.js.map\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/rxjs/Scheduler.js\n// module id = 18\n// module chunks = 0","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Observable_1 = require('./Observable');\nvar Subscriber_1 = require('./Subscriber');\nvar Subscription_1 = require('./Subscription');\nvar ObjectUnsubscribedError_1 = require('./util/ObjectUnsubscribedError');\nvar SubjectSubscription_1 = require('./SubjectSubscription');\nvar rxSubscriber_1 = require('./symbol/rxSubscriber');\n/**\n * @class SubjectSubscriber<T>\n */\nvar SubjectSubscriber = (function (_super) {\n    __extends(SubjectSubscriber, _super);\n    function SubjectSubscriber(destination) {\n        _super.call(this, destination);\n        this.destination = destination;\n    }\n    return SubjectSubscriber;\n}(Subscriber_1.Subscriber));\nexports.SubjectSubscriber = SubjectSubscriber;\n/**\n * @class Subject<T>\n */\nvar Subject = (function (_super) {\n    __extends(Subject, _super);\n    function Subject() {\n        _super.call(this);\n        this.observers = [];\n        this.closed = false;\n        this.isStopped = false;\n        this.hasError = false;\n        this.thrownError = null;\n    }\n    Subject.prototype[rxSubscriber_1.rxSubscriber] = function () {\n        return new SubjectSubscriber(this);\n    };\n    Subject.prototype.lift = function (operator) {\n        var subject = new AnonymousSubject(this, this);\n        subject.operator = operator;\n        return subject;\n    };\n    Subject.prototype.next = function (value) {\n        if (this.closed) {\n            throw new ObjectUnsubscribedError_1.ObjectUnsubscribedError();\n        }\n        if (!this.isStopped) {\n            var observers = this.observers;\n            var len = observers.length;\n            var copy = observers.slice();\n            for (var i = 0; i < len; i++) {\n                copy[i].next(value);\n            }\n        }\n    };\n    Subject.prototype.error = function (err) {\n        if (this.closed) {\n            throw new ObjectUnsubscribedError_1.ObjectUnsubscribedError();\n        }\n        this.hasError = true;\n        this.thrownError = err;\n        this.isStopped = true;\n        var observers = this.observers;\n        var len = observers.length;\n        var copy = observers.slice();\n        for (var i = 0; i < len; i++) {\n            copy[i].error(err);\n        }\n        this.observers.length = 0;\n    };\n    Subject.prototype.complete = function () {\n        if (this.closed) {\n            throw new ObjectUnsubscribedError_1.ObjectUnsubscribedError();\n        }\n        this.isStopped = true;\n        var observers = this.observers;\n        var len = observers.length;\n        var copy = observers.slice();\n        for (var i = 0; i < len; i++) {\n            copy[i].complete();\n        }\n        this.observers.length = 0;\n    };\n    Subject.prototype.unsubscribe = function () {\n        this.isStopped = true;\n        this.closed = true;\n        this.observers = null;\n    };\n    Subject.prototype._trySubscribe = function (subscriber) {\n        if (this.closed) {\n            throw new ObjectUnsubscribedError_1.ObjectUnsubscribedError();\n        }\n        else {\n            return _super.prototype._trySubscribe.call(this, subscriber);\n        }\n    };\n    /** @deprecated internal use only */ Subject.prototype._subscribe = function (subscriber) {\n        if (this.closed) {\n            throw new ObjectUnsubscribedError_1.ObjectUnsubscribedError();\n        }\n        else if (this.hasError) {\n            subscriber.error(this.thrownError);\n            return Subscription_1.Subscription.EMPTY;\n        }\n        else if (this.isStopped) {\n            subscriber.complete();\n            return Subscription_1.Subscription.EMPTY;\n        }\n        else {\n            this.observers.push(subscriber);\n            return new SubjectSubscription_1.SubjectSubscription(this, subscriber);\n        }\n    };\n    Subject.prototype.asObservable = function () {\n        var observable = new Observable_1.Observable();\n        observable.source = this;\n        return observable;\n    };\n    Subject.create = function (destination, source) {\n        return new AnonymousSubject(destination, source);\n    };\n    return Subject;\n}(Observable_1.Observable));\nexports.Subject = Subject;\n/**\n * @class AnonymousSubject<T>\n */\nvar AnonymousSubject = (function (_super) {\n    __extends(AnonymousSubject, _super);\n    function AnonymousSubject(destination, source) {\n        _super.call(this);\n        this.destination = destination;\n        this.source = source;\n    }\n    AnonymousSubject.prototype.next = function (value) {\n        var destination = this.destination;\n        if (destination && destination.next) {\n            destination.next(value);\n        }\n    };\n    AnonymousSubject.prototype.error = function (err) {\n        var destination = this.destination;\n        if (destination && destination.error) {\n            this.destination.error(err);\n        }\n    };\n    AnonymousSubject.prototype.complete = function () {\n        var destination = this.destination;\n        if (destination && destination.complete) {\n            this.destination.complete();\n        }\n    };\n    /** @deprecated internal use only */ AnonymousSubject.prototype._subscribe = function (subscriber) {\n        var source = this.source;\n        if (source) {\n            return this.source.subscribe(subscriber);\n        }\n        else {\n            return Subscription_1.Subscription.EMPTY;\n        }\n    };\n    return AnonymousSubject;\n}(Subject));\nexports.AnonymousSubject = AnonymousSubject;\n//# sourceMappingURL=Subject.js.map\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/rxjs/Subject.js\n// module id = 19\n// module chunks = 0","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Subscription_1 = require('./Subscription');\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar SubjectSubscription = (function (_super) {\n    __extends(SubjectSubscription, _super);\n    function SubjectSubscription(subject, subscriber) {\n        _super.call(this);\n        this.subject = subject;\n        this.subscriber = subscriber;\n        this.closed = false;\n    }\n    SubjectSubscription.prototype.unsubscribe = function () {\n        if (this.closed) {\n            return;\n        }\n        this.closed = true;\n        var subject = this.subject;\n        var observers = subject.observers;\n        this.subject = null;\n        if (!observers || observers.length === 0 || subject.isStopped || subject.closed) {\n            return;\n        }\n        var subscriberIndex = observers.indexOf(this.subscriber);\n        if (subscriberIndex !== -1) {\n            observers.splice(subscriberIndex, 1);\n        }\n    };\n    return SubjectSubscription;\n}(Subscription_1.Subscription));\nexports.SubjectSubscription = SubjectSubscription;\n//# sourceMappingURL=SubjectSubscription.js.map\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/rxjs/SubjectSubscription.js\n// module id = 20\n// module chunks = 0","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar filter_1 = require('../../operator/filter');\nObservable_1.Observable.prototype.filter = filter_1.filter;\n//# sourceMappingURL=filter.js.map\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/rxjs/add/operator/filter.js\n// module id = 21\n// module chunks = 0","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar map_1 = require('../../operator/map');\nObservable_1.Observable.prototype.map = map_1.map;\n//# sourceMappingURL=map.js.map\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/rxjs/add/operator/map.js\n// module id = 22\n// module chunks = 0","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar withLatestFrom_1 = require('../../operator/withLatestFrom');\nObservable_1.Observable.prototype.withLatestFrom = withLatestFrom_1.withLatestFrom;\n//# sourceMappingURL=withLatestFrom.js.map\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/rxjs/add/operator/withLatestFrom.js\n// module id = 23\n// module chunks = 0","\"use strict\";\nvar filter_1 = require('../operators/filter');\n/* tslint:enable:max-line-length */\n/**\n * Filter items emitted by the source Observable by only emitting those that\n * satisfy a specified predicate.\n *\n * <span class=\"informal\">Like\n * [Array.prototype.filter()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter),\n * it only emits a value from the source if it passes a criterion function.</span>\n *\n * <img src=\"./img/filter.png\" width=\"100%\">\n *\n * Similar to the well-known `Array.prototype.filter` method, this operator\n * takes values from the source Observable, passes them through a `predicate`\n * function and only emits those values that yielded `true`.\n *\n * @example <caption>Emit only click events whose target was a DIV element</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var clicksOnDivs = clicks.filter(ev => ev.target.tagName === 'DIV');\n * clicksOnDivs.subscribe(x => console.log(x));\n *\n * @see {@link distinct}\n * @see {@link distinctUntilChanged}\n * @see {@link distinctUntilKeyChanged}\n * @see {@link ignoreElements}\n * @see {@link partition}\n * @see {@link skip}\n *\n * @param {function(value: T, index: number): boolean} predicate A function that\n * evaluates each value emitted by the source Observable. If it returns `true`,\n * the value is emitted, if `false` the value is not passed to the output\n * Observable. The `index` parameter is the number `i` for the i-th source\n * emission that has happened since the subscription, starting from the number\n * `0`.\n * @param {any} [thisArg] An optional argument to determine the value of `this`\n * in the `predicate` function.\n * @return {Observable} An Observable of values from the source that were\n * allowed by the `predicate` function.\n * @method filter\n * @owner Observable\n */\nfunction filter(predicate, thisArg) {\n    return filter_1.filter(predicate, thisArg)(this);\n}\nexports.filter = filter;\n//# sourceMappingURL=filter.js.map\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/rxjs/operator/filter.js\n// module id = 24\n// module chunks = 0","\"use strict\";\nvar map_1 = require('../operators/map');\n/**\n * Applies a given `project` function to each value emitted by the source\n * Observable, and emits the resulting values as an Observable.\n *\n * <span class=\"informal\">Like [Array.prototype.map()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map),\n * it passes each source value through a transformation function to get\n * corresponding output values.</span>\n *\n * <img src=\"./img/map.png\" width=\"100%\">\n *\n * Similar to the well known `Array.prototype.map` function, this operator\n * applies a projection to each value and emits that projection in the output\n * Observable.\n *\n * @example <caption>Map every click to the clientX position of that click</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var positions = clicks.map(ev => ev.clientX);\n * positions.subscribe(x => console.log(x));\n *\n * @see {@link mapTo}\n * @see {@link pluck}\n *\n * @param {function(value: T, index: number): R} project The function to apply\n * to each `value` emitted by the source Observable. The `index` parameter is\n * the number `i` for the i-th emission that has happened since the\n * subscription, starting from the number `0`.\n * @param {any} [thisArg] An optional argument to define what `this` is in the\n * `project` function.\n * @return {Observable<R>} An Observable that emits the values from the source\n * Observable transformed by the given `project` function.\n * @method map\n * @owner Observable\n */\nfunction map(project, thisArg) {\n    return map_1.map(project, thisArg)(this);\n}\nexports.map = map;\n//# sourceMappingURL=map.js.map\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/rxjs/operator/map.js\n// module id = 25\n// module chunks = 0","\"use strict\";\nvar withLatestFrom_1 = require('../operators/withLatestFrom');\n/* tslint:enable:max-line-length */\n/**\n * Combines the source Observable with other Observables to create an Observable\n * whose values are calculated from the latest values of each, only when the\n * source emits.\n *\n * <span class=\"informal\">Whenever the source Observable emits a value, it\n * computes a formula using that value plus the latest values from other input\n * Observables, then emits the output of that formula.</span>\n *\n * <img src=\"./img/withLatestFrom.png\" width=\"100%\">\n *\n * `withLatestFrom` combines each value from the source Observable (the\n * instance) with the latest values from the other input Observables only when\n * the source emits a value, optionally using a `project` function to determine\n * the value to be emitted on the output Observable. All input Observables must\n * emit at least one value before the output Observable will emit a value.\n *\n * @example <caption>On every click event, emit an array with the latest timer event plus the click event</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var timer = Rx.Observable.interval(1000);\n * var result = clicks.withLatestFrom(timer);\n * result.subscribe(x => console.log(x));\n *\n * @see {@link combineLatest}\n *\n * @param {ObservableInput} other An input Observable to combine with the source\n * Observable. More than one input Observables may be given as argument.\n * @param {Function} [project] Projection function for combining values\n * together. Receives all values in order of the Observables passed, where the\n * first parameter is a value from the source Observable. (e.g.\n * `a.withLatestFrom(b, c, (a1, b1, c1) => a1 + b1 + c1)`). If this is not\n * passed, arrays will be emitted on the output Observable.\n * @return {Observable} An Observable of projected values from the most recent\n * values from each input Observable, or an array of the most recent values from\n * each input Observable.\n * @method withLatestFrom\n * @owner Observable\n */\nfunction withLatestFrom() {\n    var args = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        args[_i - 0] = arguments[_i];\n    }\n    return withLatestFrom_1.withLatestFrom.apply(void 0, args)(this);\n}\nexports.withLatestFrom = withLatestFrom;\n//# sourceMappingURL=withLatestFrom.js.map\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/rxjs/operator/withLatestFrom.js\n// module id = 26\n// module chunks = 0","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Subscriber_1 = require('../Subscriber');\n/* tslint:enable:max-line-length */\n/**\n * Filter items emitted by the source Observable by only emitting those that\n * satisfy a specified predicate.\n *\n * <span class=\"informal\">Like\n * [Array.prototype.filter()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter),\n * it only emits a value from the source if it passes a criterion function.</span>\n *\n * <img src=\"./img/filter.png\" width=\"100%\">\n *\n * Similar to the well-known `Array.prototype.filter` method, this operator\n * takes values from the source Observable, passes them through a `predicate`\n * function and only emits those values that yielded `true`.\n *\n * @example <caption>Emit only click events whose target was a DIV element</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var clicksOnDivs = clicks.filter(ev => ev.target.tagName === 'DIV');\n * clicksOnDivs.subscribe(x => console.log(x));\n *\n * @see {@link distinct}\n * @see {@link distinctUntilChanged}\n * @see {@link distinctUntilKeyChanged}\n * @see {@link ignoreElements}\n * @see {@link partition}\n * @see {@link skip}\n *\n * @param {function(value: T, index: number): boolean} predicate A function that\n * evaluates each value emitted by the source Observable. If it returns `true`,\n * the value is emitted, if `false` the value is not passed to the output\n * Observable. The `index` parameter is the number `i` for the i-th source\n * emission that has happened since the subscription, starting from the number\n * `0`.\n * @param {any} [thisArg] An optional argument to determine the value of `this`\n * in the `predicate` function.\n * @return {Observable} An Observable of values from the source that were\n * allowed by the `predicate` function.\n * @method filter\n * @owner Observable\n */\nfunction filter(predicate, thisArg) {\n    return function filterOperatorFunction(source) {\n        return source.lift(new FilterOperator(predicate, thisArg));\n    };\n}\nexports.filter = filter;\nvar FilterOperator = (function () {\n    function FilterOperator(predicate, thisArg) {\n        this.predicate = predicate;\n        this.thisArg = thisArg;\n    }\n    FilterOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new FilterSubscriber(subscriber, this.predicate, this.thisArg));\n    };\n    return FilterOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar FilterSubscriber = (function (_super) {\n    __extends(FilterSubscriber, _super);\n    function FilterSubscriber(destination, predicate, thisArg) {\n        _super.call(this, destination);\n        this.predicate = predicate;\n        this.thisArg = thisArg;\n        this.count = 0;\n    }\n    // the try catch block below is left specifically for\n    // optimization and perf reasons. a tryCatcher is not necessary here.\n    FilterSubscriber.prototype._next = function (value) {\n        var result;\n        try {\n            result = this.predicate.call(this.thisArg, value, this.count++);\n        }\n        catch (err) {\n            this.destination.error(err);\n            return;\n        }\n        if (result) {\n            this.destination.next(value);\n        }\n    };\n    return FilterSubscriber;\n}(Subscriber_1.Subscriber));\n//# sourceMappingURL=filter.js.map\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/rxjs/operators/filter.js\n// module id = 27\n// module chunks = 0","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Subscriber_1 = require('../Subscriber');\n/**\n * Applies a given `project` function to each value emitted by the source\n * Observable, and emits the resulting values as an Observable.\n *\n * <span class=\"informal\">Like [Array.prototype.map()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map),\n * it passes each source value through a transformation function to get\n * corresponding output values.</span>\n *\n * <img src=\"./img/map.png\" width=\"100%\">\n *\n * Similar to the well known `Array.prototype.map` function, this operator\n * applies a projection to each value and emits that projection in the output\n * Observable.\n *\n * @example <caption>Map every click to the clientX position of that click</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var positions = clicks.map(ev => ev.clientX);\n * positions.subscribe(x => console.log(x));\n *\n * @see {@link mapTo}\n * @see {@link pluck}\n *\n * @param {function(value: T, index: number): R} project The function to apply\n * to each `value` emitted by the source Observable. The `index` parameter is\n * the number `i` for the i-th emission that has happened since the\n * subscription, starting from the number `0`.\n * @param {any} [thisArg] An optional argument to define what `this` is in the\n * `project` function.\n * @return {Observable<R>} An Observable that emits the values from the source\n * Observable transformed by the given `project` function.\n * @method map\n * @owner Observable\n */\nfunction map(project, thisArg) {\n    return function mapOperation(source) {\n        if (typeof project !== 'function') {\n            throw new TypeError('argument is not a function. Are you looking for `mapTo()`?');\n        }\n        return source.lift(new MapOperator(project, thisArg));\n    };\n}\nexports.map = map;\nvar MapOperator = (function () {\n    function MapOperator(project, thisArg) {\n        this.project = project;\n        this.thisArg = thisArg;\n    }\n    MapOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new MapSubscriber(subscriber, this.project, this.thisArg));\n    };\n    return MapOperator;\n}());\nexports.MapOperator = MapOperator;\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar MapSubscriber = (function (_super) {\n    __extends(MapSubscriber, _super);\n    function MapSubscriber(destination, project, thisArg) {\n        _super.call(this, destination);\n        this.project = project;\n        this.count = 0;\n        this.thisArg = thisArg || this;\n    }\n    // NOTE: This looks unoptimized, but it's actually purposefully NOT\n    // using try/catch optimizations.\n    MapSubscriber.prototype._next = function (value) {\n        var result;\n        try {\n            result = this.project.call(this.thisArg, value, this.count++);\n        }\n        catch (err) {\n            this.destination.error(err);\n            return;\n        }\n        this.destination.next(result);\n    };\n    return MapSubscriber;\n}(Subscriber_1.Subscriber));\n//# sourceMappingURL=map.js.map\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/rxjs/operators/map.js\n// module id = 28\n// module chunks = 0","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar OuterSubscriber_1 = require('../OuterSubscriber');\nvar subscribeToResult_1 = require('../util/subscribeToResult');\n/* tslint:enable:max-line-length */\n/**\n * Combines the source Observable with other Observables to create an Observable\n * whose values are calculated from the latest values of each, only when the\n * source emits.\n *\n * <span class=\"informal\">Whenever the source Observable emits a value, it\n * computes a formula using that value plus the latest values from other input\n * Observables, then emits the output of that formula.</span>\n *\n * <img src=\"./img/withLatestFrom.png\" width=\"100%\">\n *\n * `withLatestFrom` combines each value from the source Observable (the\n * instance) with the latest values from the other input Observables only when\n * the source emits a value, optionally using a `project` function to determine\n * the value to be emitted on the output Observable. All input Observables must\n * emit at least one value before the output Observable will emit a value.\n *\n * @example <caption>On every click event, emit an array with the latest timer event plus the click event</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var timer = Rx.Observable.interval(1000);\n * var result = clicks.withLatestFrom(timer);\n * result.subscribe(x => console.log(x));\n *\n * @see {@link combineLatest}\n *\n * @param {ObservableInput} other An input Observable to combine with the source\n * Observable. More than one input Observables may be given as argument.\n * @param {Function} [project] Projection function for combining values\n * together. Receives all values in order of the Observables passed, where the\n * first parameter is a value from the source Observable. (e.g.\n * `a.withLatestFrom(b, c, (a1, b1, c1) => a1 + b1 + c1)`). If this is not\n * passed, arrays will be emitted on the output Observable.\n * @return {Observable} An Observable of projected values from the most recent\n * values from each input Observable, or an array of the most recent values from\n * each input Observable.\n * @method withLatestFrom\n * @owner Observable\n */\nfunction withLatestFrom() {\n    var args = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        args[_i - 0] = arguments[_i];\n    }\n    return function (source) {\n        var project;\n        if (typeof args[args.length - 1] === 'function') {\n            project = args.pop();\n        }\n        var observables = args;\n        return source.lift(new WithLatestFromOperator(observables, project));\n    };\n}\nexports.withLatestFrom = withLatestFrom;\nvar WithLatestFromOperator = (function () {\n    function WithLatestFromOperator(observables, project) {\n        this.observables = observables;\n        this.project = project;\n    }\n    WithLatestFromOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new WithLatestFromSubscriber(subscriber, this.observables, this.project));\n    };\n    return WithLatestFromOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar WithLatestFromSubscriber = (function (_super) {\n    __extends(WithLatestFromSubscriber, _super);\n    function WithLatestFromSubscriber(destination, observables, project) {\n        _super.call(this, destination);\n        this.observables = observables;\n        this.project = project;\n        this.toRespond = [];\n        var len = observables.length;\n        this.values = new Array(len);\n        for (var i = 0; i < len; i++) {\n            this.toRespond.push(i);\n        }\n        for (var i = 0; i < len; i++) {\n            var observable = observables[i];\n            this.add(subscribeToResult_1.subscribeToResult(this, observable, observable, i));\n        }\n    }\n    WithLatestFromSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n        this.values[outerIndex] = innerValue;\n        var toRespond = this.toRespond;\n        if (toRespond.length > 0) {\n            var found = toRespond.indexOf(outerIndex);\n            if (found !== -1) {\n                toRespond.splice(found, 1);\n            }\n        }\n    };\n    WithLatestFromSubscriber.prototype.notifyComplete = function () {\n        // noop\n    };\n    WithLatestFromSubscriber.prototype._next = function (value) {\n        if (this.toRespond.length === 0) {\n            var args = [value].concat(this.values);\n            if (this.project) {\n                this._tryProject(args);\n            }\n            else {\n                this.destination.next(args);\n            }\n        }\n    };\n    WithLatestFromSubscriber.prototype._tryProject = function (args) {\n        var result;\n        try {\n            result = this.project.apply(this, args);\n        }\n        catch (err) {\n            this.destination.error(err);\n            return;\n        }\n        this.destination.next(result);\n    };\n    return WithLatestFromSubscriber;\n}(OuterSubscriber_1.OuterSubscriber));\n//# sourceMappingURL=withLatestFrom.js.map\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/rxjs/operators/withLatestFrom.js\n// module id = 29\n// module chunks = 0","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Subscription_1 = require('../Subscription');\n/**\n * A unit of work to be executed in a {@link Scheduler}. An action is typically\n * created from within a Scheduler and an RxJS user does not need to concern\n * themselves about creating and manipulating an Action.\n *\n * ```ts\n * class Action<T> extends Subscription {\n *   new (scheduler: Scheduler, work: (state?: T) => void);\n *   schedule(state?: T, delay: number = 0): Subscription;\n * }\n * ```\n *\n * @class Action<T>\n */\nvar Action = (function (_super) {\n    __extends(Action, _super);\n    function Action(scheduler, work) {\n        _super.call(this);\n    }\n    /**\n     * Schedules this action on its parent Scheduler for execution. May be passed\n     * some context object, `state`. May happen at some point in the future,\n     * according to the `delay` parameter, if specified.\n     * @param {T} [state] Some contextual data that the `work` function uses when\n     * called by the Scheduler.\n     * @param {number} [delay] Time to wait before executing the work, where the\n     * time unit is implicit and defined by the Scheduler.\n     * @return {void}\n     */\n    Action.prototype.schedule = function (state, delay) {\n        if (delay === void 0) { delay = 0; }\n        return this;\n    };\n    return Action;\n}(Subscription_1.Subscription));\nexports.Action = Action;\n//# sourceMappingURL=Action.js.map\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/rxjs/scheduler/Action.js\n// module id = 30\n// module chunks = 0","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar root_1 = require('../util/root');\nvar Action_1 = require('./Action');\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar AsyncAction = (function (_super) {\n    __extends(AsyncAction, _super);\n    function AsyncAction(scheduler, work) {\n        _super.call(this, scheduler, work);\n        this.scheduler = scheduler;\n        this.pending = false;\n        this.work = work;\n    }\n    AsyncAction.prototype.schedule = function (state, delay) {\n        if (delay === void 0) { delay = 0; }\n        if (this.closed) {\n            return this;\n        }\n        // Always replace the current state with the new state.\n        this.state = state;\n        // Set the pending flag indicating that this action has been scheduled, or\n        // has recursively rescheduled itself.\n        this.pending = true;\n        var id = this.id;\n        var scheduler = this.scheduler;\n        //\n        // Important implementation note:\n        //\n        // Actions only execute once by default, unless rescheduled from within the\n        // scheduled callback. This allows us to implement single and repeat\n        // actions via the same code path, without adding API surface area, as well\n        // as mimic traditional recursion but across asynchronous boundaries.\n        //\n        // However, JS runtimes and timers distinguish between intervals achieved by\n        // serial `setTimeout` calls vs. a single `setInterval` call. An interval of\n        // serial `setTimeout` calls can be individually delayed, which delays\n        // scheduling the next `setTimeout`, and so on. `setInterval` attempts to\n        // guarantee the interval callback will be invoked more precisely to the\n        // interval period, regardless of load.\n        //\n        // Therefore, we use `setInterval` to schedule single and repeat actions.\n        // If the action reschedules itself with the same delay, the interval is not\n        // canceled. If the action doesn't reschedule, or reschedules with a\n        // different delay, the interval will be canceled after scheduled callback\n        // execution.\n        //\n        if (id != null) {\n            this.id = this.recycleAsyncId(scheduler, id, delay);\n        }\n        this.delay = delay;\n        // If this action has already an async Id, don't request a new one.\n        this.id = this.id || this.requestAsyncId(scheduler, this.id, delay);\n        return this;\n    };\n    AsyncAction.prototype.requestAsyncId = function (scheduler, id, delay) {\n        if (delay === void 0) { delay = 0; }\n        return root_1.root.setInterval(scheduler.flush.bind(scheduler, this), delay);\n    };\n    AsyncAction.prototype.recycleAsyncId = function (scheduler, id, delay) {\n        if (delay === void 0) { delay = 0; }\n        // If this action is rescheduled with the same delay time, don't clear the interval id.\n        if (delay !== null && this.delay === delay && this.pending === false) {\n            return id;\n        }\n        // Otherwise, if the action's delay time is different from the current delay,\n        // or the action has been rescheduled before it's executed, clear the interval id\n        return root_1.root.clearInterval(id) && undefined || undefined;\n    };\n    /**\n     * Immediately executes this action and the `work` it contains.\n     * @return {any}\n     */\n    AsyncAction.prototype.execute = function (state, delay) {\n        if (this.closed) {\n            return new Error('executing a cancelled action');\n        }\n        this.pending = false;\n        var error = this._execute(state, delay);\n        if (error) {\n            return error;\n        }\n        else if (this.pending === false && this.id != null) {\n            // Dequeue if the action didn't reschedule itself. Don't call\n            // unsubscribe(), because the action could reschedule later.\n            // For example:\n            // ```\n            // scheduler.schedule(function doWork(counter) {\n            //   /* ... I'm a busy worker bee ... */\n            //   var originalAction = this;\n            //   /* wait 100ms before rescheduling the action */\n            //   setTimeout(function () {\n            //     originalAction.schedule(counter + 1);\n            //   }, 100);\n            // }, 1000);\n            // ```\n            this.id = this.recycleAsyncId(this.scheduler, this.id, null);\n        }\n    };\n    AsyncAction.prototype._execute = function (state, delay) {\n        var errored = false;\n        var errorValue = undefined;\n        try {\n            this.work(state);\n        }\n        catch (e) {\n            errored = true;\n            errorValue = !!e && e || new Error(e);\n        }\n        if (errored) {\n            this.unsubscribe();\n            return errorValue;\n        }\n    };\n    /** @deprecated internal use only */ AsyncAction.prototype._unsubscribe = function () {\n        var id = this.id;\n        var scheduler = this.scheduler;\n        var actions = scheduler.actions;\n        var index = actions.indexOf(this);\n        this.work = null;\n        this.state = null;\n        this.pending = false;\n        this.scheduler = null;\n        if (index !== -1) {\n            actions.splice(index, 1);\n        }\n        if (id != null) {\n            this.id = this.recycleAsyncId(scheduler, id, null);\n        }\n        this.delay = null;\n    };\n    return AsyncAction;\n}(Action_1.Action));\nexports.AsyncAction = AsyncAction;\n//# sourceMappingURL=AsyncAction.js.map\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/rxjs/scheduler/AsyncAction.js\n// module id = 31\n// module chunks = 0","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Scheduler_1 = require('../Scheduler');\nvar AsyncScheduler = (function (_super) {\n    __extends(AsyncScheduler, _super);\n    function AsyncScheduler() {\n        _super.apply(this, arguments);\n        this.actions = [];\n        /**\n         * A flag to indicate whether the Scheduler is currently executing a batch of\n         * queued actions.\n         * @type {boolean}\n         */\n        this.active = false;\n        /**\n         * An internal ID used to track the latest asynchronous task such as those\n         * coming from `setTimeout`, `setInterval`, `requestAnimationFrame`, and\n         * others.\n         * @type {any}\n         */\n        this.scheduled = undefined;\n    }\n    AsyncScheduler.prototype.flush = function (action) {\n        var actions = this.actions;\n        if (this.active) {\n            actions.push(action);\n            return;\n        }\n        var error;\n        this.active = true;\n        do {\n            if (error = action.execute(action.state, action.delay)) {\n                break;\n            }\n        } while (action = actions.shift()); // exhaust the scheduler queue\n        this.active = false;\n        if (error) {\n            while (action = actions.shift()) {\n                action.unsubscribe();\n            }\n            throw error;\n        }\n    };\n    return AsyncScheduler;\n}(Scheduler_1.Scheduler));\nexports.AsyncScheduler = AsyncScheduler;\n//# sourceMappingURL=AsyncScheduler.js.map\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/rxjs/scheduler/AsyncScheduler.js\n// module id = 32\n// module chunks = 0","\"use strict\";\nvar AsyncAction_1 = require('./AsyncAction');\nvar AsyncScheduler_1 = require('./AsyncScheduler');\n/**\n *\n * Async Scheduler\n *\n * <span class=\"informal\">Schedule task as if you used setTimeout(task, duration)</span>\n *\n * `async` scheduler schedules tasks asynchronously, by putting them on the JavaScript\n * event loop queue. It is best used to delay tasks in time or to schedule tasks repeating\n * in intervals.\n *\n * If you just want to \"defer\" task, that is to perform it right after currently\n * executing synchronous code ends (commonly achieved by `setTimeout(deferredTask, 0)`),\n * better choice will be the {@link asap} scheduler.\n *\n * @example <caption>Use async scheduler to delay task</caption>\n * const task = () => console.log('it works!');\n *\n * Rx.Scheduler.async.schedule(task, 2000);\n *\n * // After 2 seconds logs:\n * // \"it works!\"\n *\n *\n * @example <caption>Use async scheduler to repeat task in intervals</caption>\n * function task(state) {\n *   console.log(state);\n *   this.schedule(state + 1, 1000); // `this` references currently executing Action,\n *                                   // which we reschedule with new state and delay\n * }\n *\n * Rx.Scheduler.async.schedule(task, 3000, 0);\n *\n * // Logs:\n * // 0 after 3s\n * // 1 after 4s\n * // 2 after 5s\n * // 3 after 6s\n *\n * @static true\n * @name async\n * @owner Scheduler\n */\nexports.async = new AsyncScheduler_1.AsyncScheduler(AsyncAction_1.AsyncAction);\n//# sourceMappingURL=async.js.map\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/rxjs/scheduler/async.js\n// module id = 33\n// module chunks = 0","\"use strict\";\nvar root_1 = require('../util/root');\nfunction symbolIteratorPonyfill(root) {\n    var Symbol = root.Symbol;\n    if (typeof Symbol === 'function') {\n        if (!Symbol.iterator) {\n            Symbol.iterator = Symbol('iterator polyfill');\n        }\n        return Symbol.iterator;\n    }\n    else {\n        // [for Mozilla Gecko 27-35:](https://mzl.la/2ewE1zC)\n        var Set_1 = root.Set;\n        if (Set_1 && typeof new Set_1()['@@iterator'] === 'function') {\n            return '@@iterator';\n        }\n        var Map_1 = root.Map;\n        // required for compatability with es6-shim\n        if (Map_1) {\n            var keys = Object.getOwnPropertyNames(Map_1.prototype);\n            for (var i = 0; i < keys.length; ++i) {\n                var key = keys[i];\n                // according to spec, Map.prototype[@@iterator] and Map.orototype.entries must be equal.\n                if (key !== 'entries' && key !== 'size' && Map_1.prototype[key] === Map_1.prototype['entries']) {\n                    return key;\n                }\n            }\n        }\n        return '@@iterator';\n    }\n}\nexports.symbolIteratorPonyfill = symbolIteratorPonyfill;\nexports.iterator = symbolIteratorPonyfill(root_1.root);\n/**\n * @deprecated use iterator instead\n */\nexports.$$iterator = exports.iterator;\n//# sourceMappingURL=iterator.js.map\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/rxjs/symbol/iterator.js\n// module id = 34\n// module chunks = 0","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\n/**\n * An error thrown when an action is invalid because the object has been\n * unsubscribed.\n *\n * @see {@link Subject}\n * @see {@link BehaviorSubject}\n *\n * @class ObjectUnsubscribedError\n */\nvar ObjectUnsubscribedError = (function (_super) {\n    __extends(ObjectUnsubscribedError, _super);\n    function ObjectUnsubscribedError() {\n        var err = _super.call(this, 'object unsubscribed');\n        this.name = err.name = 'ObjectUnsubscribedError';\n        this.stack = err.stack;\n        this.message = err.message;\n    }\n    return ObjectUnsubscribedError;\n}(Error));\nexports.ObjectUnsubscribedError = ObjectUnsubscribedError;\n//# sourceMappingURL=ObjectUnsubscribedError.js.map\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/rxjs/util/ObjectUnsubscribedError.js\n// module id = 35\n// module chunks = 0","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\n/**\n * An error thrown when one or more errors have occurred during the\n * `unsubscribe` of a {@link Subscription}.\n */\nvar UnsubscriptionError = (function (_super) {\n    __extends(UnsubscriptionError, _super);\n    function UnsubscriptionError(errors) {\n        _super.call(this);\n        this.errors = errors;\n        var err = Error.call(this, errors ?\n            errors.length + \" errors occurred during unsubscription:\\n  \" + errors.map(function (err, i) { return ((i + 1) + \") \" + err.toString()); }).join('\\n  ') : '');\n        this.name = err.name = 'UnsubscriptionError';\n        this.stack = err.stack;\n        this.message = err.message;\n    }\n    return UnsubscriptionError;\n}(Error));\nexports.UnsubscriptionError = UnsubscriptionError;\n//# sourceMappingURL=UnsubscriptionError.js.map\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/rxjs/util/UnsubscriptionError.js\n// module id = 36\n// module chunks = 0","\"use strict\";\nexports.isArray = Array.isArray || (function (x) { return x && typeof x.length === 'number'; });\n//# sourceMappingURL=isArray.js.map\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/rxjs/util/isArray.js\n// module id = 37\n// module chunks = 0","\"use strict\";\nexports.isArrayLike = (function (x) { return x && typeof x.length === 'number'; });\n//# sourceMappingURL=isArrayLike.js.map\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/rxjs/util/isArrayLike.js\n// module id = 38\n// module chunks = 0","\"use strict\";\nfunction isPromise(value) {\n    return value && typeof value.subscribe !== 'function' && typeof value.then === 'function';\n}\nexports.isPromise = isPromise;\n//# sourceMappingURL=isPromise.js.map\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/rxjs/util/isPromise.js\n// module id = 39\n// module chunks = 0","\"use strict\";\n/* tslint:disable:no-empty */\nfunction noop() { }\nexports.noop = noop;\n//# sourceMappingURL=noop.js.map\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/rxjs/util/noop.js\n// module id = 40\n// module chunks = 0","\"use strict\";\nvar noop_1 = require('./noop');\n/* tslint:enable:max-line-length */\nfunction pipe() {\n    var fns = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        fns[_i - 0] = arguments[_i];\n    }\n    return pipeFromArray(fns);\n}\nexports.pipe = pipe;\n/* @internal */\nfunction pipeFromArray(fns) {\n    if (!fns) {\n        return noop_1.noop;\n    }\n    if (fns.length === 1) {\n        return fns[0];\n    }\n    return function piped(input) {\n        return fns.reduce(function (prev, fn) { return fn(prev); }, input);\n    };\n}\nexports.pipeFromArray = pipeFromArray;\n//# sourceMappingURL=pipe.js.map\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/rxjs/util/pipe.js\n// module id = 41\n// module chunks = 0","\"use strict\";\nvar root_1 = require('./root');\nvar isArrayLike_1 = require('./isArrayLike');\nvar isPromise_1 = require('./isPromise');\nvar isObject_1 = require('./isObject');\nvar Observable_1 = require('../Observable');\nvar iterator_1 = require('../symbol/iterator');\nvar InnerSubscriber_1 = require('../InnerSubscriber');\nvar observable_1 = require('../symbol/observable');\nfunction subscribeToResult(outerSubscriber, result, outerValue, outerIndex) {\n    var destination = new InnerSubscriber_1.InnerSubscriber(outerSubscriber, outerValue, outerIndex);\n    if (destination.closed) {\n        return null;\n    }\n    if (result instanceof Observable_1.Observable) {\n        if (result._isScalar) {\n            destination.next(result.value);\n            destination.complete();\n            return null;\n        }\n        else {\n            destination.syncErrorThrowable = true;\n            return result.subscribe(destination);\n        }\n    }\n    else if (isArrayLike_1.isArrayLike(result)) {\n        for (var i = 0, len = result.length; i < len && !destination.closed; i++) {\n            destination.next(result[i]);\n        }\n        if (!destination.closed) {\n            destination.complete();\n        }\n    }\n    else if (isPromise_1.isPromise(result)) {\n        result.then(function (value) {\n            if (!destination.closed) {\n                destination.next(value);\n                destination.complete();\n            }\n        }, function (err) { return destination.error(err); })\n            .then(null, function (err) {\n            // Escaping the Promise trap: globally throw unhandled errors\n            root_1.root.setTimeout(function () { throw err; });\n        });\n        return destination;\n    }\n    else if (result && typeof result[iterator_1.iterator] === 'function') {\n        var iterator = result[iterator_1.iterator]();\n        do {\n            var item = iterator.next();\n            if (item.done) {\n                destination.complete();\n                break;\n            }\n            destination.next(item.value);\n            if (destination.closed) {\n                break;\n            }\n        } while (true);\n    }\n    else if (result && typeof result[observable_1.observable] === 'function') {\n        var obs = result[observable_1.observable]();\n        if (typeof obs.subscribe !== 'function') {\n            destination.error(new TypeError('Provided object does not correctly implement Symbol.observable'));\n        }\n        else {\n            return obs.subscribe(new InnerSubscriber_1.InnerSubscriber(outerSubscriber, outerValue, outerIndex));\n        }\n    }\n    else {\n        var value = isObject_1.isObject(result) ? 'an invalid object' : \"'\" + result + \"'\";\n        var msg = (\"You provided \" + value + \" where a stream was expected.\")\n            + ' You can provide an Observable, Promise, Array, or Iterable.';\n        destination.error(new TypeError(msg));\n    }\n    return null;\n}\nexports.subscribeToResult = subscribeToResult;\n//# sourceMappingURL=subscribeToResult.js.map\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/rxjs/util/subscribeToResult.js\n// module id = 42\n// module chunks = 0","\"use strict\";\nvar Subscriber_1 = require('../Subscriber');\nvar rxSubscriber_1 = require('../symbol/rxSubscriber');\nvar Observer_1 = require('../Observer');\nfunction toSubscriber(nextOrObserver, error, complete) {\n    if (nextOrObserver) {\n        if (nextOrObserver instanceof Subscriber_1.Subscriber) {\n            return nextOrObserver;\n        }\n        if (nextOrObserver[rxSubscriber_1.rxSubscriber]) {\n            return nextOrObserver[rxSubscriber_1.rxSubscriber]();\n        }\n    }\n    if (!nextOrObserver && !error && !complete) {\n        return new Subscriber_1.Subscriber(Observer_1.empty);\n    }\n    return new Subscriber_1.Subscriber(nextOrObserver, error, complete);\n}\nexports.toSubscriber = toSubscriber;\n//# sourceMappingURL=toSubscriber.js.map\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/rxjs/util/toSubscriber.js\n// module id = 43\n// module chunks = 0","\"use strict\";\nvar errorObject_1 = require('./errorObject');\nvar tryCatchTarget;\nfunction tryCatcher() {\n    try {\n        return tryCatchTarget.apply(this, arguments);\n    }\n    catch (e) {\n        errorObject_1.errorObject.e = e;\n        return errorObject_1.errorObject;\n    }\n}\nfunction tryCatch(fn) {\n    tryCatchTarget = fn;\n    return tryCatcher;\n}\nexports.tryCatch = tryCatch;\n;\n//# sourceMappingURL=tryCatch.js.map\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/rxjs/util/tryCatch.js\n// module id = 44\n// module chunks = 0","import { newCmdBus$, logCmdBus } from './cmdBus.js'\nimport { submodelCmd } from './submodelCmd.js'\n\nexport default {\n  newCmdBus$,\n  logCmdBus,\n  submodelCmd\n}\n\n\n// WEBPACK FOOTER //\n// ./src/pilota.js"],"sourceRoot":""}